<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Source: gasto/TablaDetalleGasto.js</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Source: gasto/TablaDetalleGasto.js</h1>

    



    
    <section>
        <article>
            <pre class="prettyprint source linenums"><code>/**
 * Funcionaliad para la tabla de detalle gasto
 * - mostrar vistas previas
 * - ver, crear y actualizar detalles de gasto
 * - mostrar documentos de la pagina
 * @class
 */
const TablaDetalleGasto = {

    mostrarOpcionesParaCargarImagen() {
        fn.showActionSheet();
        // if (device.platform == 'iOS') {
        //     this.cargarImagen('OTRO');
        // } else {
        //     fn.showActionSheet();
        // }
    },

    /**
     * Opcion para cargar imagenes
     * para galeria y camara se usa un plugin
     * para el input se utiliza lo mismo que an iOS
     * 
     * @param {string} fuente CAMARA, GALERIA, OTRO
     */    
    cargarImagen(fuente) {
        if (fuente === 'GALERIA' || fuente === 'CAMARA') {
            GastosService.cargarImagenConPlugin(fuente)
                .then(fileEntry => TablaDetalleGasto.mostarComprobanteComoCargado(1, fileEntry))
                .catch(error => {
                    showError('No se pudo cargar la imagen')
                    gastoLog.error('No se pudo cargar la imagen', error);
                })
        } else if(fuente == 'OTRO') {
            this.cargarDocumentoIOS(1);
        }
        fn.hideActionSheet();
    },

    /**
     * Carga la imagen desde un input
     */
    cargarImagenInput(e) {
        let input = document.getElementById('gastos_archivo_file');
        GastosService.cargarImagenDesdeInput(input)
            .then(fileEntry => TablaDetalleGasto.mostarComprobanteComoCargado(1, fileEntry))
            .catch(error => {
                showError('No se pudo cargar el gasto')
                gastoLog.error('No se pudo cargar el gasto', error);
            })
    },

    cargarDocumentoAndroid(e, numeroComprobante) {
        /** @type {HTMLInputElement} */
        let input = e.target;
        let extension = input.value.split('.').pop().toLowerCase();
        if (numeroComprobante == 1 &amp;&amp; !(extension == 'jpg' || extension == 'jpeg' || extension == 'png')) {
            showError('La extension debe ser xml');
            return;
        }
        if (numeroComprobante == 2 &amp;&amp; extension != 'xml') {
            showError('La extension debe ser xml');
            return;
        } else if (numeroComprobante == 3 &amp;&amp; extension != 'pdf') {
            showError('La extension debe ser pdf');
            return;
        }
        GastosService.guardarDocumentoGastoDesdeInput(input).then(fileEntry => {
            return TablaDetalleGasto.mostarComprobanteComoCargado(numeroComprobante, fileEntry);
        }).catch(error => {
            input.value = null;
            TablaDetalleGasto.mostarComprobanteSinSubir(numeroComprobante);
            showError('No se pudo guardar el documento xml');
            gastoLog.error('Error no se pudo guardar el documento', error)
        });
    },

    /**
     * Cargar documentos xml y pdf en iOS el plugin FilePicker
     * 
     * @param {number} numeroComprobante 
     */
    cargarDocumentoIOS(numeroComprobante) {
        //Abre el directorio para seleccionar archivos
        return new Promise((resolve, reject) => {
            DocumentPicker.getFile('all', resolve, reject);
        }).then(file => {    
            console.error('file', file);
            //file = file.replace("/private", "file://");
            let extension = file.split('.').pop().toLowerCase();
            let newName = getUUID() + '.' + extension;
            if (numeroComprobante == 1 &amp;&amp; !(extension == 'jpg' || extension == 'jpeg' || extension == 'png')) {
                showError('La extension debe ser xml');
                return;
            }
            else if (numeroComprobante == 2 &amp;&amp; extension != 'xml') {
                return Promise.reject('Extension invalida')
            } else if (numeroComprobante == 3 &amp;&amp; extension != 'pdf') {
                return Promise.reject('Extension invalida')
            }
            return GastosService.guardarDocumentoGasto(file, newName).then(fileEntry => {
                if (extension === 'xml') {
                    TablaDetalleGasto.mostarComprobanteComoCargado(2, fileEntry)
                } else if (extension === 'pdf') {
                    TablaDetalleGasto.mostarComprobanteComoCargado(3, fileEntry)
                } else {
                    TablaDetalleGasto.mostarComprobanteComoCargado(1, fileEntry)
                }
            })
        }).catch(error => {
            showError('No se pudo abrir el archivo')
            uploadLog.error('Error al abrir archivo', error)
        })
    },

    /**
     * Muestra un modal con la imagen previa y las opciones de abrir con otra aplicacion
     * si la imagen no esta en el dispositivo la descarga
     */
    vistaPreviaImagen() {
        let imagen = document.getElementById('previoImagen').dataset.documento;
        let modal = document.getElementById('vistaPreviaImagenGasto');
        let archivoLocal = Promise.resolve(imagen);
        if (imagen.includes('../documentos')) { // no esta en el dispositivo, hay que descargarla
            archivoLocal = GastosService.descargarDocumenetoServidor(imagen);
        }
        archivoLocal
            .then(nativeURL => {
                console.error('nativeURL', nativeURL)
                return Directorios.obtenerBlobArchivo(nativeURL)
            })
            .then(blob => new Promise((resolve, reject) => {
                console.error(blob);
                let reader = new FileReader();
                reader.onloadend = e => resolve(reader.result);
                reader.onerror = reject;
                reader.readAsDataURL(blob);
            }))
            .then(base64 => {
                modal.querySelector('img').src = base64;
                modal.show();
            })
            .catch(error => {
                gastoLog.error('Error al abrir imagen previa', error)
                showError('No se pudo abrir la imagen previa')
            })
    },

    /**
     * Muestra un modal con la vista previa del xml y la opcion de abrirlo en otra aplicacion
     * si el xml no esta disponible en local lo descarga
     */
    vistaPreviaXML() {
        let xml = document.getElementById('previoXML').dataset.documento;
        let modal = document.getElementById('vistaPreviaXMLGasto');
        let archivoLocal = Promise.resolve(xml);
        if (xml.includes('../documentos')) {
            archivoLocal = GastosService.descargarDocumenetoServidor(xml);
        }
        archivoLocal
            .then(nativeURL => {
                console.error('obteniendo blob', nativeURL)
                return Directorios.obtenerBlobArchivo(nativeURL)
            })
            .then(blob => new Promise((resolve, reject) => {
                console.error('blob', blob)
                let reader = new FileReader();
                reader.onloadend = e => resolve(e.srcElement.result);
                reader.onerror = e => reject;
                reader.readAsText(blob);
            }))
            .then(xml => {
                return modal.show().then(() => {
                    modal.querySelector('p').innerText = xml;
                })
            })
            .catch(error => {
                gastoLog.error('Error al abrir xml previo', error);
                showError('No se pudo abrir el xml del gasto');
                modal.hide();
            });
    },

    /**
     * Abre la imagen con otra aplicacion
     */
    abrirImagenPrevio() {
        let imagen = document.getElementById('previoImagen').dataset.documento;
        let modal = document.getElementById('vistaPreviaImagenGasto');
        let archivoLocal = Promise.resolve(imagen);
        console.error('abriendo imagen', imagen)
        if (imagen.includes('../documentos')) {
            archivoLocal = GastosService.descargarDocumenetoServidor(imagen);
        }
        archivoLocal
            .then(nativeURL => abrirDocumentoConAplicacionDeTerceros(nativeURL, 'image/png'))
            .catch(error => showError('No se pudo abrir el documento'))
            .finally(() => modal.hide())
    },

    /**
     * Abre el xml con una aplicacion de terceros
     */
    abrirXMLPrevio() {
        let xml = document.getElementById('previoXML').dataset.documento;
        let modal = document.getElementById('vistaPreviaXMLGasto');
        let archivoLocal = Promise.resolve(xml);
        if (xml.includes('../documentos')) {
            archivoLocal = GastosService.descargarDocumenetoServidor(xml);
        }
        archivoLocal
            .then(nativeURL => abrirDocumentoConAplicacionDeTerceros(nativeURL, 'text/xml'))
            .catch(error => showError('No se pudo abrir el documento'))
            .finally(() => modal.hide())
    },

    /**
     * Abre el pdf con una aplicacion de terceros
     */
    abrirDocumentoPrevioPDF() {
        let pdf = document.getElementById('previoPDF').dataset.documento;
        let archivoLocal = Promise.resolve(pdf);
        if (pdf.includes('../documentos')) {
            archivoLocal = GastosService.descargarDocumenetoServidor(pdf);
        }
        archivoLocal
            .then(nativeURL => abrirDocumentoConAplicacionDeTerceros(nativeURL, 'application/pdf'))
            .catch(error => showError('No se pudo abrir el documento'))
            .finally(() => modal.hide())
    },

    /**
     * Muetra el comprobante como cargado
     * 
     * @param {number} numero 
     * @param {*} fileEntry 
     */
    mostarComprobanteComoCargado(numero, fileEntry) {
        let input = document.getElementById('fotoComprobante');
        let previo = document.getElementById('previoImagen')
        if (numero == 1) {
            document.getElementById('gastos_archivo').value = fileEntry.nativeURL; // guardar archivo
        } else if (numero == 2) {
            input = document.getElementById('xmlCargado');
            previo = document.getElementById('previoXML')
            document.getElementById('gastos_archivo_xml').value = fileEntry.nativeURL; // guardar archivo
        } else if (numero == 3) {
            input = document.getElementById('archivoCargado')
            previo = document.getElementById('previoPDF');
            document.getElementById('gastos_archivo_3').value = fileEntry.nativeURL; // guardar archivo
        }
        // mostrar documento como cargado
        input.parentElement.querySelector('span').innerText = `Comprob. ${numero} Cargado`;
        input.parentElement.style.backgroundColor = '#FE8416';
        input.parentElement.style.color = 'white';
        previo.style.display = 'block'; // mostrar vista previa
        previo.dataset.documento = fileEntry.nativeURL; // agregar documento para vista previa
        previo.querySelector('span').innerText = fileEntry.fullPath.split('/').pop() // agregando nombre del documento
    },

    /**
     * Muestra el comprobante como no cargado, con la opcion de subirlo
     * @param {number} numero 
     */
    mostarComprobanteSinSubir(numero) {
        let input = document.getElementById('fotoComprobante');
        let previo = document.getElementById('previoImagen')
        if (numero == 1) {
            document.getElementById('gastos_archivo').value = null; // guardar archivo
        } else if (numero == 2) {
            input = document.getElementById('xmlCargado');
            previo = document.getElementById('previoXML')
            document.getElementById('gastos_archivo_xml').value = null; // guardar archivo
        } else if (numero == 3) {
            input = document.getElementById('archivoCargado')
            previo = document.getElementById('previoPDF');
            document.getElementById('gastos_archivo_3').value = null; // guardar archivo
        }
        // mostrar documento como no cargado
        input.parentElement.querySelector('span').innerText = `Subir`;;
        previo.style.display = 'none'; // ocultar vista previa
        previo.dataset.documento = null; // quitar documento para vista previa
    },

    /**
     * Función que consulta el detalle de un gasto y carga su tabla
     * @param {number|string} idDetalleGasto 
     */
    verDetalleGasto(idDetalleGasto, idGasto) {
        let idSiniestro = window.localStorage.getItem("idSiniestroServidor");
        gastoLog.debug(`consultando detalle gasto idGasto: ${idGasto} idDetalleGasto: ${idDetalleGasto}`);
        window.localStorage.setItem("idDetalleGasto", idDetalleGasto); //Inicio sesión
        fn.load("detalleReporteGasto.html").then(() => {
            document.querySelector('[data-seleccionar-ajustador]').style.display = 'none';
            document.querySelector('[data-limpiar-ajustador]').style.display = 'none';
        })
        showLoading();
        sqlQuery('SELECT * FROM DetalleGasto WHERE idDetalleGasto = ? AND fk_idGasto = ?', [idDetalleGasto, idGasto], function (detalleGasto) {
            if (detalleGasto != true) {
                TablaDetalleGasto.mostrarDetalleGasto(detalleGasto)
            } else {
                showNotice("El gasto no esta disponible");
            }
        });
    },

    /**
     * Elimina el detalle del gasto
     * @returns {Promise&lt;any>}
     */
    eliminarDetalleGasto() {
        let idDetalleGasto = document.getElementById('idDetalleGasto').value;
        ons.notification.confirm('¿Esta seguro que desea eliminar este detalle de gasto?', {
            title: 'Eliminar',
            cancelable: true,
            buttonLabels: ['Cancelar', 'Confirmar']
        }).then(resultado => {
            if (resultado === 0) {
                return Promise.reject(resultado);
            }
            return GastosService.obtenerDetalleGasto(idDetalleGasto);
        }).then(detalleGasto => {
            let estaSincronizado = detalleGasto.gastos_id != null &amp;&amp;
                String(detalleGasto.gastos_id).trim() != '';
            if (!estaSincronizado) { // eliminar localmente
                console.log('no esta sincronizado eliminado localmente')
                return GastosService.eliminarDetalleGasto(idDetalleGasto)
                    .then(() => verReporteGasto(null, detalleGasto.fk_idGasto));
            } else { // dejar pendiente de eliminacion
                return guardarPeticionPromise('', 'POST', 'EliminarDetalleGasto', 'idDetalleGasto', idDetalleGasto)
                    .then(() => verReporteGasto(null, detalleGasto.fk_idGasto));
            }
        }).catch(error => {
            // 0 - fue cancelado por el usuario en el prompt
            if (error !== 0) {
                showError('No se pudo eliminar el gasto')
                gastoLog.error('No se pudo iniciar el proceso para eliminar detalle gasto', error)
            }
        })
    },

    /**
     * Función que permite mostrar
     * la información detallada del reporte de un gasto
     * @param {number} detalleGasto 
     */
    mostrarDetalleGasto(detalleGasto) {
        showLoading();
        let botonPrevioXML = document.getElementById('previoXML');
        let botonPrevioPDF = document.getElementById('previoPDF');
        let botonPrevioImagen = document.getElementById('previoImagen');
        let previoPDF = document.getElementById('previoPDF');
        let titleApp = window.localStorage.getItem("titleApp");
        let title = window.localStorage.getItem("tituloGasto");
        $('#titleApp').html(titleApp);
        $('#titlePage').append(title);
        if (detalleGasto != null) {
            let estaSincronizado = detalleGasto[0].gastos_id != null &amp;&amp;
                String(detalleGasto[0].gastos_id).trim() != '';
            if (!estaSincronizado) {
                $('#informacion-extra').append(`
                    &lt;tr data-pendiente-subir>
                        &lt;th colspan="3">&lt;ons-icon icon="md-info">&lt;/ons-icon> Pendiente de subir &lt;/ons-icon>
                        &lt;/th>
                    &lt;/tr>
                `);
            }
            GastosService.tieneDocumentosPendientes(detalleGasto[0].idDetalleGasto).then(tieneDocumentosPendientes => {
                if (tieneDocumentosPendientes) {
                    $('#informacion-extra').append(`
                    &lt;tr data-documentos-pendientes>
                        &lt;th colspan="3">&lt;ons-icon icon="md-info">&lt;/ons-icon> 
                            Documentos pendientes de subir 
                        &lt;/th>
                    &lt;/tr>
                `);
                }
            });
            CatalogoService.obtenerAjustadorPorId(detalleGasto[0].gastos_ajustador).then(ajustador => {
                $('[data-ajustador-nombre]').val(ajustador.nombre);
                $('[data-ajustador-nombre-defecto]').val(ajustador.nombre);
                $('[data-ajustador-iniciales]').val(ajustador.iniciales);
                $('[data-ajustador-iniciales-defecto]').val(ajustador.iniciales);
            }).catch(e => {
                $('[data-ajustador-nombre]').val(detalleGasto[0].ajustador);
                $('[data-ajustador-nombre-defecto]').val(detalleGasto[0].ajustador);
                $('[data-ajustador-iniciales]').val(detalleGasto[0].ajustador);
                $('[data-ajustador-iniciales-defecto]').val(detalleGasto[0].ajustador);
            })
            $('[data-ajustador-id]').val(detalleGasto[0].gastos_ajustador);
            $('[data-ajustador-id-defecto]').val(detalleGasto[0].gastos_ajustador);
            $('#idDetalleGasto').val(detalleGasto[0].idDetalleGasto);
            $('#gastos_id').val(detalleGasto[0].gastos_id);
            $('#gastos_fecha_real').val(detalleGasto[0].gastos_fecha_real);
            $('#gastos_descripcion').val(detalleGasto[0].gastos_descripcion);
            $('#gastos_razon_social').val(detalleGasto[0].gastos_razon_social);
            $('#gastos_emisor').val(detalleGasto[0].gastos_emisor);
            $('#gastos_valor').val(detalleGasto[0].gastos_valor);
            $('#gastos_moneda').html(detalleGasto[0].gastos_moneda);
            $('#gastos_cargar').val(detalleGasto[0].gastos_cargar);
            $('#gastos_amex').val(detalleGasto[0].gastos_amex);
            $('#idGasto').val(detalleGasto[0].fk_idGasto);
            console.error('Detalle gasto mostrado', detalleGasto)
            let comprob1 = detalleGasto[0].gastos_archivo ? detalleGasto[0].gastos_archivo : detalleGasto[0].up_documento_2;
            if (comprob1 != undefined &amp;&amp; comprob1 != null) {
                window.localStorage.setItem("comprob1", true);
                //$('#gastos_archivo').val(comprob1);
                $('#titleComprob1').html('&lt;a style="color:#0081BD;">&lt;center>&lt;strong>Comprob. 1&lt;/strong>&lt;/center>&lt;/a>');
                botonPrevioImagen.querySelector('span').innerText = comprob1.substr(comprob1.lastIndexOf('/') + 1);
                botonPrevioImagen.dataset.documento = comprob1;
                botonPrevioImagen.style.display = 'block';
            }

            let comprob2 = detalleGasto[0].gastos_archivo_xml;
            if (comprob2 != null &amp;&amp; comprob2.trim() != "") {
                console.error('si hay xml')
                //$('#gastos_archivo_xml').val(comprob2);
                $('#titleComprob2').html('&lt;a style="color:#0081BD;">&lt;center>&lt;strong>Comprob. 2&lt;/strong>&lt;/center>&lt;/a>');
                botonPrevioXML.querySelector('span').innerText = comprob2.substr(comprob2.lastIndexOf('/') + 1);
                botonPrevioXML.dataset.documento = comprob2;
                botonPrevioXML.style.display = 'block';
            }

            let comprob3 = detalleGasto[0].gastos_archivo_3;
            if (comprob3 != null &amp;&amp; comprob3.trim() != "") {
                //$('#gastos_archivo_3').val(comprob3);
                $('#titleComprob3').html('&lt;a style="color:#0081BD;">&lt;center>&lt;strong>Comprob. 3&lt;/strong>&lt;/center>&lt;/a>');
                botonPrevioPDF.querySelector('span').innerText = comprob3.substr(comprob3.lastIndexOf('/') + 1);
                botonPrevioPDF.dataset.documento = comprob3;
                botonPrevioPDF.style.display = 'block';
            }

            sqlQuery('SELECT * FROM CatalogoConcepto', null, function (conceptos) {
                if (conceptos != true) {
                    var selectConceptos = '';
                    selectConceptos += '&lt;ons-select id="select_conceptos">';
                    conceptos.forEach(function (concepto) {
                        if (concepto.concepto_tex == detalleGasto[0].gastos_concepto) {
                            selectConceptos += '&lt;option value="' + concepto.concepto_id + '" selected>' + concepto.concepto_tex + '&lt;/option>';
                        } else {
                            selectConceptos += '&lt;option value="' + concepto.concepto_id + '" >' + concepto.concepto_tex + '&lt;/option>';
                        }
                    });
                    selectConceptos += '&lt;/ons-select>'
                    $('#gastos_concepto').html(selectConceptos);
                }
            });
            loadActionSheet('imageOptions.html');
            $('#detalleOptions').html(`
                &lt;ons-row>
                    &lt;ons-col>
                        &lt;center>
                            &lt;ons-button id="btnGuardarDetalleGasto" style="
                                        font-size:18px;
                                        background-color:#D8DADB;
                                        color: #0081BD;" 
                                    onclick="TablaDetalleGasto.actualizarDetalleGasto()">
                                &lt;ons-icon icon="md-save" style="color: #FE8416;">&lt;/ons-icon>
                                &amp;nbsp;Guardar cambios
                            &lt;/ons-button>
                        &lt;/center>
                    &lt;/ons-col>
                &lt;/ons-row>
            `);
            GastosService.estaPendienteDeEliminar(detalleGasto[0].idDetalleGasto).then(pendiente => {
                if (!pendiente) {
                    $('#detalleOptions center').append(`  
                        &lt;ons-button id="btnGuardarDetalleGasto" style="
                                    margin-top: 1rem;
                                    font-size:18px;
                                    background-color:red;
                                    color: #fff" 
                                onclick="TablaDetalleGasto.eliminarDetalleGasto()">
                            &lt;ons-icon icon="md-delete" style="color: #fff;">&lt;/ons-icon>
                            &amp;nbsp;Eliminar gasto
                        &lt;/ons-button>
                    `);
                } else {
                    $('#informacion-extra').append(`
                        &lt;tr>
                            &lt;th colspan="3" style="color: red;">
                                &lt;ons-icon icon="md-info">&lt;/ons-icon> Pendiente de eliminar
                            &lt;/th>
                        &lt;/tr>
                    `);
                }
            })    
        } else {
            showNotice("No se logró obtener el detalle del gasto");
        }
        hideLoading();
    },

    /**
    * Función que muestra las opciones de la
    * pantalla detalle gastos
    * @param {*} tipo 
    */
    optionsDetalleGasto(tipo) {
        var html = '';
        if(tipo == 'nuevo'){
            html += '&lt;ons-row>'
                    + '&lt;ons-col>'
                        + '&lt;center>'
                            + '&lt;ons-button id="btnCrearYSalir" style="font-size:18px;background-color:#D8DADB;color: #0081BD" onclick="submitNuevoDetalleSalir();">'
                                + '&lt;ons-icon icon="md-save" style="color: #FE8416;">&lt;/ons-icon>'
                                + ' Crear y Salir'
                            + '&lt;/ons-button>'
                        + '&lt;/center>'
                    + '&lt;/ons-col>'
                    + '&lt;ons-col>'
                    + '&lt;center>'
                        + '&lt;ons-button id="btnCrearYNuevo" style="font-size:18px;background-color:#D8DADB;color: #0081BD" onclick="submitNuevoDetalleNuevo();">'
                            + '&lt;ons-icon icon="md-save" style="color: #FE8416;">&lt;/ons-icon>'
                            + ' Crear y Nuevo'
                        + '&lt;/ons-button>'
                    + '&lt;/center>'
                + '&lt;/ons-col>'
            + '&lt;/ons-row>';
        }else{
            html += '&lt;ons-row>'
                    + '&lt;ons-col>'
                        + '&lt;center>'
                            + '&lt;ons-button id="btnGuardarDetalleGasto" style="font-size:18px;background-color:#D8DADB;color: #0081BD" onclick="TablaDetalleGasto.actualizarDetalleGasto()">'
                                + '&lt;ons-icon icon="md-save" style="color: #FE8416;">&lt;/ons-icon>'
                                + '&amp;nbsp;Guardar cambios'
                            + '&lt;/ons-button>'
                        + '&lt;/center>'
                    + '&lt;/ons-col>'
                + '&lt;/ons-row>';
        }
        
        $('#detalleOptions').html(html);
    },

    /**
     * Guarda el nuevo detalle
     * accion='salir' crea el detalle y regresa al reporte de gasto
     * accion='nuevo' crea el detalle y vuelve a la pantall para crear detalles de gasto
     * @param {string} accion nuevo, salir
     */
    guardarNuevoDetalle(accion) {
        document.getElementById('btnCrearYSalir').setAttribute('disabled', 'disabled');
        document.getElementById('btnCrearYNuevo').setAttribute('disabled', 'disabled');
        if (accion == 'salir') {
            document.getElementById('btnCrearYSalir').insertAdjacentHTML('beforeend', `&lt;span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true" style="margin-bottom: 2px;">&lt;/span>`)
        } else if (accion == 'nuevo') {
            document.getElementById('btnCrearYNuevo').insertAdjacentHTML('beforeend', `&lt;span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true" style="margin-bottom: 2px;">&lt;/span>`)
        }
        gastoLog.debug('guardando nuevo detalle accion:' + accion);

        var idConcepto = $('#select_conceptos').val();
        let idGasto = window.localStorage.getItem("idGasto");
        let gastos_repor_id = window.localStorage.getItem("numeroReporte");
        if ($.trim(gastos_repor_id) == "") {
            verReporteGasto(null, idGasto);
            showError("Ocurrió un problema, intente capturar el gasto nuevamente");
            return;
        }
        getConceptoPorId(idConcepto, function (concepto) {
            console.error('\n\n Guardando nuevo detalle \n\n')
            TablaDetalleGasto.obtenerParametros(concepto.concepto_tex)
                .then(params => {
                    gastoLog.debug('params recibidos', params)
                    GastosService.guardarDetalleGasto(params)
                        .then(r => r.insertId) // obtener id del SQlResultSet
                        .then(idDetalleGasto => {
                            // agregar peticion para el detalle
                            console.error('idDetalleGasto', idDetalleGasto)
                            let agregarPeticionDetalle = guardarPeticionPromise(server + "gasto_detalle.php",
                                'DOCUMENT', 'DetalleGasto', 'idDetalleGasto', idDetalleGasto);
                            let actualizarXML = Promise.resolve();
                            let actualizarPDF = Promise.resolve();
                            // actualizar foto
                            let actualizarFoto = GastosService.actualizarFoto(idGasto, idDetalleGasto, params.up_documento_2)
                                .then(r => r.insertId)
                                .then(idDocumentoGasto => guardarPeticionPromise(server + "archivos_gasto.php", 'DOCUMENT',
                                    'DocumentoGasto', 'idDocumentoGasto', idDocumentoGasto))
                            // actualizar el xml, generar peticion y notificar al usuario
                            if (params.gastos_archivo_xml != null &amp;&amp; params.gastos_archivo_xml.trim() != "") {
                                actualizarXML = GastosService.actualizarXML(params.fk_idGasto, idDetalleGasto, params.gastos_archivo_xml)
                                    .then(r => r.insertId) // obtener id del SQlResultSet
                                    .then(idDocumentoGasto => guardarPeticionPromise(server + "archivos_gasto.php", 'DOCUMENT',
                                        'DocumentoGasto', 'idDocumentoGasto', idDocumentoGasto))
                                    .then(() => showSuccess("Se ha guardado el Comprobante 2 exitosamente"))
                            }
                            // actualizar el pdf, generar peticion y notificar al usuario
                            if (params.gastos_archivo_3 != null &amp;&amp; params.gastos_archivo_3.trim() != "") {
                                actualizarPDF = GastosService.actualizarPDF(params.fk_idGasto, idDetalleGasto, params.gastos_archivo_3)
                                    .then(r => r.insertId) // obtener id del SQlResultSet
                                    .then(idDocumentoGasto => guardarPeticionPromise(server + "archivos_gasto.php", 'DOCUMENT',
                                        'DocumentoGasto', 'idDocumentoGasto', idDocumentoGasto))
                                    .then(() => showSuccess("Se ha guardado el Comprobante 3 exitosamente"))
                            }
                            return Promise.all([
                                agregarPeticionDetalle,
                                actualizarFoto,
                                actualizarXML,
                                actualizarPDF,
                            ])
                        })
                }).then(() => {
                    if (accion == 'nuevo') {
                        initNuevoDetalle();
                    } else {
                        verReporteGasto(null, idGasto);
                    }
                })
                .catch(error => {
                    if (error === 'Imagen no disponible') {
                        showError('La imagen no esta disponible');
                    } else {
                        showError('No se pudo guardar el detalle de gasto');
                    }
                    gastoLog.error('No se guardo detalle', error);
                    var spinner = document.querySelector('#btnCrearYSalir span');
                    if (spinner != null) {
                        spinner.parentNode.removeChild(spinner)
                    }
                    spinner = document.querySelector('#btnCrearYNuevo span');
                    if (spinner != null) {
                        spinner.parentNode.removeChild(spinner)
                    }
                    document.getElementById('btnCrearYSalir').removeAttribute('disabled');
                    document.getElementById('btnCrearYNuevo').removeAttribute('disabled');
                })
        });
    },

    /**
     * Actualiza el detalle de gasto con los datos del formulario
     */
    actualizarDetalleGasto() {
        document.getElementById('btnGuardarDetalleGasto').setAttribute('disabled', 'disabled');
        document.getElementById('btnGuardarDetalleGasto').insertAdjacentHTML('beforeend', `&lt;span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true" style="margin-bottom: 2px;">&lt;/span>`)
        gastoLog.debug('actualizando detalle gasto');

        var idConcepto = $('#select_conceptos').val();
        getConceptoPorId(idConcepto, function (concepto) {
            TablaDetalleGasto.obtenerParametros(concepto.concepto_tex)
                .then(params => {
                    let actualizarDetallePromesa = GastosService.actualizarDetalleGastoSinDocumentos(params)
                        .then(() => guardarPeticionPromise('gasto_detalle.php', 'PUT',
                            'DetalleGasto', 'idDetalleGasto', params.idDetalleGasto))
                    let actualizarXML = null;
                    let actualizarPDF = null;
                    let actualizarFoto = null;
                    // actualizar el foto, generar peticion y notificar al usuario
                    if (params.gastos_archivo != null &amp;&amp; params.gastos_archivo.trim() != "") {
                        actualizarFoto = GastosService.actualizarFoto(params.gastos_id, params.idDetalleGasto, params.gastos_archivo)
                            .then(r => r.insertId) // obtener id del SQlResultSet
                            .then(idDocumentoGasto => guardarPeticionPromise(server + "archivos_gasto.php", 'DOCUMENT',
                                'DocumentoGasto', 'idDocumentoGasto', idDocumentoGasto))
                            .then(() => showSuccess("Se ha actualizado el Comprobante 1 exitosamente"))
                    }
                    // actualizar el xml, generar peticion y notificar al usuario
                    if (params.gastos_archivo_xml != null &amp;&amp; params.gastos_archivo_xml.trim() != "") {
                        actualizarXML = GastosService.actualizarXML(params.gastos_id, params.idDetalleGasto, params.gastos_archivo_xml)
                            .then(r => r.insertId) // obtener id del SQlResultSet
                            .then(idDocumentoGasto => guardarPeticionPromise(server + "archivos_gasto.php", 'DOCUMENT',
                                'DocumentoGasto', 'idDocumentoGasto', idDocumentoGasto))
                            .then(() => showSuccess("Se ha actualizado el Comprobante 2 exitosamente"))
                    }
                    // actualizar el pdf, generar peticion y notificar al usuario
                    if (params.gastos_archivo_3 != null &amp;&amp; params.gastos_archivo_3.trim() != "") {
                        actualizarPDF = GastosService.actualizarPDF(params.gastos_id, params.idDetalleGasto, params.gastos_archivo_3)
                            .then(r => r.insertId) // obtener id del SQlResultSet
                            .then(idDocumentoGasto => guardarPeticionPromise(server + "archivos_gasto.php", 'DOCUMENT',
                                'DocumentoGasto', 'idDocumentoGasto', idDocumentoGasto))
                            .then(() => showSuccess("Se ha actualizado el Comprobante 3 exitosamente"))
                    }
                    return Promise.all([
                        actualizarDetallePromesa,
                        actualizarXML,
                        actualizarPDF,
                        actualizarFoto
                    ]).then(() => {
                        showSuccess("Se ha actualizado el detalle del gasto");
                        TablaDetalleGasto.verDetalleGasto(params.idDetalleGasto, params.fk_idGasto);
                    })
                })
                .catch(error => {
                    gastoLog.error('No se guardo detalle', error);
                    if (error === 'Imagen no disponible') {
                        showError('La imagen no esta disponible');
                    } else {
                        showError('No se pudo guardar el detalle de gasto');
                    }
                    var spinner = document.querySelector('#btnGuardarDetalleGasto span');
                    if (spinner != null) {
                        spinner.parentNode.removeChild(spinner)
                    }
                    document.getElementById('btnGuardarDetalleGasto').removeAttribute('disabled');
                })
        });
    },

    /**
     * Función para obtener los parámetros del detalle gasto del formulario
     */
    obtenerParametros(concepto) {
        var idSiniestro = window.localStorage.getItem("idSiniestroServidor");
        var moneda = window.localStorage.getItem("monedaGasto");
        var idGasto = window.localStorage.getItem("idGasto");
        var gastos_repor_id = window.localStorage.getItem("numeroReporte");
        var gastos_id = $('#gastos_id').val();
        var idDetalleGasto = $('#idDetalleGasto').val();
        var fotoComprobanteInput = document.getElementById('fotoComprobante');
        var fotoComprobante = fotoComprobanteInput.value.trim() != '' ? fotoComprobanteInput.value : $('#gastos_archivo').val();
        var fecha_real = $('#gastos_fecha_real').val();

        var detalleGasto = {
            idDetalleGasto: idDetalleGasto ? idDetalleGasto : null,
            gastos_id: gastos_id ? gastos_id : null,
            gastos_caso: idSiniestro ? idSiniestro : 0,
            gastos_ajustador: $('[data-ajustador-id]').val(),
            gastos_visada: null,
            gastos_id_reporte: gastos_repor_id ? gastos_repor_id : 0,
            gastos_valor: $('#gastos_valor').val(),
            gastos_cargar: $('#gastos_cargar').val(),
            gastos_moneda: moneda ? moneda : null,
            gastos_fecha_real: fecha_real ? fecha_real : null,
            gastos_emisor: $('#gastos_emisor').val(),
            gastos_descripcion: $('#gastos_descripcion').val(),
            gastos_concepto: concepto,
            gastos_razon_social: $('#gastos_razon_social').val(),
            gastos_viaje_ini: null,
            gastos_viaje_fin: null,
            gastos_amex: $('#gastos_amex').val(),
            gastos_nulo: null,
            gastos_user: window.localStorage.getItem("idUser"),
            gastos_archivo: $('#gastos_archivo').val(),
            gastos_archivo_xml: $('#gastos_archivo_xml').val(),
            gastos_archivo_3: $('#gastos_archivo_3').val(),
            gastos_fecha: null,
            ajustador: $('[data-ajustador-iniciales]').val(),
            fk_idGasto: idGasto != null ? idGasto : null,
            //Peticion de post
            gastos_repor_id: gastos_repor_id ? gastos_repor_id : 0,
            gastos_movil_caso: idSiniestro ? idSiniestro : 0,
            anio: fecha_real.split("-")[0] ? fecha_real.split("-")[0] : null,
            mes: fecha_real.split("-")[1] ? fecha_real.split("-")[1] : null,
            dia: fecha_real.split("-")[2] ? fecha_real.split("-")[2] : null,
            up_documento_2: $('#gastos_archivo').val(),
        }
        return Promise.resolve(detalleGasto);
    },
}
 </code></pre>
        </article>
    </section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Modules</h3><ul><li><a href="module-GestureDetector.html">GestureDetector</a></li><li><a href="module-gestures.html">gestures</a></li></ul><h3>Classes</h3><ul><li><a href="-_anonymous_-GestureDetector.Instance.html">Instance</a></li><li><a href="CatalogoService.html">CatalogoService</a></li><li><a href="DialogoCerrarSesion.html">DialogoCerrarSesion</a></li><li><a href="DialogoNuevoUsuario.html">DialogoNuevoUsuario</a></li><li><a href="DialogoRestablecer.html">DialogoRestablecer</a></li><li><a href="GastosService.html">GastosService</a></li><li><a href="InspeccionFotografia.html">InspeccionFotografia</a></li><li><a href="InspeccionSubirDocumento.html">InspeccionSubirDocumento</a></li><li><a href="InspeccionTablaFotografias.html">InspeccionTablaFotografias</a></li><li><a href="ListadoPeticiones.html">ListadoPeticiones</a></li><li><a href="module-GestureDetector.Detection.html">Detection</a></li><li><a href="module-GestureDetector.Event.html">Event</a></li><li><a href="module-GestureDetector.PointerEvent.html">PointerEvent</a></li><li><a href="module-gestures.Drag.html">Drag</a></li><li><a href="module-gestures.Gesture.html">Gesture</a></li><li><a href="module-gestures.Hold.html">Hold</a></li><li><a href="module-gestures.Release.html">Release</a></li><li><a href="module-gestures.Swipe.html">Swipe</a></li><li><a href="module-gestures.Tap.html">Tap</a></li><li><a href="module-gestures.Touch.html">Touch</a></li><li><a href="module-gestures.Transform.html">Transform</a></li><li><a href="PeticionesDao.html">PeticionesDao</a></li><li><a href="TablaDetalleGasto.html">TablaDetalleGasto</a></li><li><a href="Utils.html">Utils</a></li></ul><h3>Events</h3><ul><li><a href="module-gestures.html#~event:change">change</a></li><li><a href="module-gestures.html#~event:changestate">changestate</a></li><li><a href="module-gestures.html#~event:close">close</a></li><li><a href="module-gestures.html#~event:destroy">destroy</a></li><li><a href="module-gestures.html#~event:doubletap">doubletap</a></li><li><a href="module-gestures.html#~event:drag">drag</a></li><li><a href="module-gestures.html#~event:dragdown">dragdown</a></li><li><a href="module-gestures.html#~event:dragend">dragend</a></li><li><a href="module-gestures.html#~event:dragright">dragright</a></li><li><a href="module-gestures.html#~event:dragstart">dragstart</a></li><li><a href="module-gestures.html#~event:dragup">dragup</a></li><li><a href="module-gestures.html#~event:drapleft">drapleft</a></li><li><a href="module-gestures.html#~event:gesture">gesture</a></li><li><a href="module-gestures.html#~event:hide">hide</a></li><li><a href="module-gestures.html#~event:hold">hold</a></li><li><a href="module-gestures.html#~event:init">init</a></li><li><a href="module-gestures.html#~event:modechange">modechange</a></li><li><a href="module-gestures.html#~event:open">open</a></li><li><a href="module-gestures.html#~event:overscroll">overscroll</a></li><li><a href="module-gestures.html#~event:pinchin">pinchin</a></li><li><a href="module-gestures.html#~event:pinchout">pinchout</a></li><li><a href="module-gestures.html#~event:postchange">postchange</a></li><li><a href="module-gestures.html#~event:postclose">postclose</a></li><li><a href="module-gestures.html#~event:posthide">posthide</a></li><li><a href="module-gestures.html#~event:postopen">postopen</a></li><li><a href="module-gestures.html#~event:postpop">postpop</a></li><li><a href="module-gestures.html#~event:postpush">postpush</a></li><li><a href="module-gestures.html#~event:postshow">postshow</a></li><li><a href="module-gestures.html#~event:prechange">prechange</a></li><li><a href="module-gestures.html#~event:preclose">preclose</a></li><li><a href="module-gestures.html#~event:prehide">prehide</a></li><li><a href="module-gestures.html#~event:preopen">preopen</a></li><li><a href="module-gestures.html#~event:prepop">prepop</a></li><li><a href="module-gestures.html#~event:prepush">prepush</a></li><li><a href="module-gestures.html#~event:preshow">preshow</a></li><li><a href="module-gestures.html#~event:reactive">reactive</a></li><li><a href="module-gestures.html#~event:refresh">refresh</a></li><li><a href="module-gestures.html#~event:release">release</a></li><li><a href="module-gestures.html#~event:rotate">rotate</a></li><li><a href="module-gestures.html#~event:show">show</a></li><li><a href="module-gestures.html#~event:swipe">swipe</a></li><li><a href="module-gestures.html#~event:swipedown">swipedown</a></li><li><a href="module-gestures.html#~event:swipeleft">swipeleft</a></li><li><a href="module-gestures.html#~event:swiperight">swiperight</a></li><li><a href="module-gestures.html#~event:swipeup">swipeup</a></li><li><a href="module-gestures.html#~event:tap">tap</a></li><li><a href="module-gestures.html#~event:touch">touch</a></li><li><a href="module-gestures.html#~event:transform">transform</a></li><li><a href="module-gestures.html#~event:transformend">transformend</a></li><li><a href="module-gestures.html#~event:transformstart">transformstart</a></li></ul><h3>Global</h3><ul><li><a href="global.html#abrirDocumentoConAplicacionDeTerceros">abrirDocumentoConAplicacionDeTerceros</a></li><li><a href="global.html#abrirNuevaInspeccion">abrirNuevaInspeccion</a></li><li><a href="global.html#actualizarEstatusPeticion">actualizarEstatusPeticion</a></li><li><a href="global.html#actualizarListadoGasto">actualizarListadoGasto</a></li><li><a href="global.html#appLog">appLog</a></li><li><a href="global.html#b64toBlob">b64toBlob</a></li><li><a href="global.html#backReporteGasto">backReporteGasto</a></li><li><a href="global.html#backVerInspeccion">backVerInspeccion</a></li><li><a href="global.html#baseDatosLog">baseDatosLog</a></li><li><a href="global.html#bitacora">bitacora</a></li><li><a href="global.html#buscarInspeccionSinSiniestro">buscarInspeccionSinSiniestro</a></li><li><a href="global.html#buscarReferencia">buscarReferencia</a></li><li><a href="global.html#buscarSiniestro">buscarSiniestro</a></li><li><a href="global.html#cambiarSiniestro">cambiarSiniestro</a></li><li><a href="global.html#cambiarTareaNoFact">cambiarTareaNoFact</a></li><li><a href="global.html#cargarSelect">cargarSelect</a></li><li><a href="global.html#clearPeticiones">clearPeticiones</a></li><li><a href="global.html#closeModal">closeModal</a></li><li><a href="global.html#CONFIGURACION_LOGGER">CONFIGURACION_LOGGER</a></li><li><a href="global.html#constructor">constructor</a></li><li><a href="global.html#consultarGastos">consultarGastos</a></li><li><a href="global.html#contentLoadedFotografias">contentLoadedFotografias</a></li><li><a href="global.html#crearDocumento">crearDocumento</a></li><li><a href="global.html#crearInspeccion">crearInspeccion</a></li><li><a href="global.html#createDatabase">createDatabase</a></li><li><a href="global.html#datos">datos</a></li><li><a href="global.html#deleteBitacora">deleteBitacora</a></li><li><a href="global.html#deleteDatabase">deleteDatabase</a></li><li><a href="global.html#deletePeticion">deletePeticion</a></li><li><a href="global.html#DescripcionPeticion">DescripcionPeticion</a></li><li><a href="global.html#dialogoComfirmarCambiosInspeccion">dialogoComfirmarCambiosInspeccion</a></li><li><a href="global.html#dialogoEditarInspeccion">dialogoEditarInspeccion</a></li><li><a href="global.html#docFotoToJson">docFotoToJson</a></li><li><a href="global.html#documento">documento</a></li><li><a href="global.html#downloadLogFile">downloadLogFile</a></li><li><a href="global.html#downloadPDF">downloadPDF</a></li><li><a href="global.html#downloadPhoto">downloadPhoto</a></li><li><a href="global.html#downloadPhotos">downloadPhotos</a></li><li><a href="global.html#dropDatabasePromise">dropDatabasePromise</a></li><li><a href="global.html#enviarPeticionesPendientes">enviarPeticionesPendientes</a></li><li><a href="global.html#faltanDatosSiniestro">faltanDatosSiniestro</a></li><li><a href="global.html#FormatearPeticion">FormatearPeticion</a></li><li><a href="global.html#FormularioInspeccion">FormularioInspeccion</a></li><li><a href="global.html#fotoInspeccionToJson">fotoInspeccionToJson</a></li><li><a href="global.html#getBitacoraData">getBitacoraData</a></li><li><a href="global.html#getBitacoraParams">getBitacoraParams</a></li><li><a href="global.html#getDataReporteGasto">getDataReporteGasto</a></li><li><a href="global.html#getGastoData">getGastoData</a></li><li><a href="global.html#getGastoParams">getGastoParams</a></li><li><a href="global.html#getLogger">getLogger</a></li><li><a href="global.html#getUUID">getUUID</a></li><li><a href="global.html#guardarBitacora">guardarBitacora</a></li><li><a href="global.html#guardarBitacoraFacturableYNueva">guardarBitacoraFacturableYNueva</a></li><li><a href="global.html#guardarBitacoraFacturableYSalir">guardarBitacoraFacturableYSalir</a></li><li><a href="global.html#guardarBitacoraNoFacturableYNueva">guardarBitacoraNoFacturableYNueva</a></li><li><a href="global.html#guardarBitacoraNoFacturableYSalir">guardarBitacoraNoFacturableYSalir</a></li><li><a href="global.html#guardarBitacoras">guardarBitacoras</a></li><li><a href="global.html#guardarCambioBitacora">guardarCambioBitacora</a></li><li><a href="global.html#guardarCambios">guardarCambios</a></li><li><a href="global.html#guardarConceptos">guardarConceptos</a></li><li><a href="global.html#guardarEstadoInspeccion">guardarEstadoInspeccion</a></li><li><a href="global.html#guardarGrupoDocumento">guardarGrupoDocumento</a></li><li><a href="global.html#guardarMonedas">guardarMonedas</a></li><li><a href="global.html#guardarNuevoGasto">guardarNuevoGasto</a></li><li><a href="global.html#guardarPeticion">guardarPeticion</a></li><li><a href="global.html#guardarPeticionPromise">guardarPeticionPromise</a></li><li><a href="global.html#guardarSiniestro">guardarSiniestro</a></li><li><a href="global.html#guardarSubtarea">guardarSubtarea</a></li><li><a href="global.html#guardarTarea">guardarTarea</a></li><li><a href="global.html#guardarTipoAnexo">guardarTipoAnexo</a></li><li><a href="global.html#guardarTipoFoto">guardarTipoFoto</a></li><li><a href="global.html#initBitacora">initBitacora</a></li><li><a href="global.html#initNuevoDetalle">initNuevoDetalle</a></li><li><a href="global.html#initNuevoGasto">initNuevoGasto</a></li><li><a href="global.html#initRefSin">initRefSin</a></li><li><a href="global.html#initResultadosSiniestro">initResultadosSiniestro</a></li><li><a href="global.html#initSendGastos">initSendGastos</a></li><li><a href="global.html#inspeccion">inspeccion</a></li><li><a href="global.html#inspeccionBuscarSin">inspeccionBuscarSin</a></li><li><a href="global.html#inspeccionCambioRegistrado">inspeccionCambioRegistrado</a></li><li><a href="global.html#inspeccionHabilitarEditarSiniestro">inspeccionHabilitarEditarSiniestro</a></li><li><a href="global.html#InspeccionService">InspeccionService</a></li><li><a href="global.html#isSynced">isSynced</a></li><li><a href="global.html#lastUserAct">lastUserAct</a></li><li><a href="global.html#limpiarCampos">limpiarCampos</a></li><li><a href="global.html#loadBitacora">loadBitacora</a></li><li><a href="global.html#loadSubtareas">loadSubtareas</a></li><li><a href="global.html#Migraciones">Migraciones</a></li><li><a href="global.html#mostrarGastos">mostrarGastos</a></li><li><a href="global.html#mostrarInspeccion">mostrarInspeccion</a></li><li><a href="global.html#mostrarNuevaInspeccion">mostrarNuevaInspeccion</a></li><li><a href="global.html#mostrarReporteGasto">mostrarReporteGasto</a></li><li><a href="global.html#nuevaBitacoraNoFacturable">nuevaBitacoraNoFacturable</a></li><li><a href="global.html#obtenerFecha">obtenerFecha</a></li><li><a href="global.html#obtenerFechaHHMMSS">obtenerFechaHHMMSS</a></li><li><a href="global.html#openEnviarIns">openEnviarIns</a></li><li><a href="global.html#openFotografiasCargadas">openFotografiasCargadas</a></li><li><a href="global.html#openPhotoCamera">openPhotoCamera</a></li><li><a href="global.html#openPhotoLibrary">openPhotoLibrary</a></li><li><a href="global.html#optionBitaFact">optionBitaFact</a></li><li><a href="global.html#paginasTotales">paginasTotales</a></li><li><a href="global.html#panelUsuario">panelUsuario</a></li><li><a href="global.html#progressBar">progressBar</a></li><li><a href="global.html#reducePictureSize">reducePictureSize</a></li><li><a href="global.html#refLog">refLog</a></li><li><a href="global.html#resetAllError">resetAllError</a></li><li><a href="global.html#resolveLocalDevicePath">resolveLocalDevicePath</a></li><li><a href="global.html#resultadosBitacora">resultadosBitacora</a></li><li><a href="global.html#resultadosDatos">resultadosDatos</a></li><li><a href="global.html#resultadosInspeccion">resultadosInspeccion</a></li><li><a href="global.html#resultadosInspeccionSin">resultadosInspeccionSin</a></li><li><a href="global.html#rowsAsList">rowsAsList</a></li><li><a href="global.html#savebase64AsPDF">savebase64AsPDF</a></li><li><a href="global.html#saveDataUser">saveDataUser</a></li><li><a href="global.html#saveEmail">saveEmail</a></li><li><a href="global.html#savePhotoFile">savePhotoFile</a></li><li><a href="global.html#saveRequest">saveRequest</a></li><li><a href="global.html#saveResponse">saveResponse</a></li><li><a href="global.html#select">select</a></li><li><a href="global.html#sendCambiosBitacora">sendCambiosBitacora</a></li><li><a href="global.html#sendMail">sendMail</a></li><li><a href="global.html#sendPeticiones">sendPeticiones</a></li><li><a href="global.html#setDataSiniestro">setDataSiniestro</a></li><li><a href="global.html#setOptions">setOptions</a></li><li><a href="global.html#showFotosCargadas">showFotosCargadas</a></li><li><a href="global.html#showModal">showModal</a></li><li><a href="global.html#sqlError">sqlError</a></li><li><a href="global.html#sqlPromise">sqlPromise</a></li><li><a href="global.html#sqlQuery">sqlQuery</a></li><li><a href="global.html#stringToBlob">stringToBlob</a></li><li><a href="global.html#submitDocumentoCargado">submitDocumentoCargado</a></li><li><a href="global.html#submitInspeccionSeleccionada">submitInspeccionSeleccionada</a></li><li><a href="global.html#submitNuevasFotografias">submitNuevasFotografias</a></li><li><a href="global.html#submitRepoGasto">submitRepoGasto</a></li><li><a href="global.html#submitValidateGastosReport">submitValidateGastosReport</a></li><li><a href="global.html#syncLocalData">syncLocalData</a></li><li><a href="global.html#takePhoto">takePhoto</a></li><li><a href="global.html#updateAnticipo">updateAnticipo</a></li><li><a href="global.html#updateBitacora">updateBitacora</a></li><li><a href="global.html#updateBitaNoFact">updateBitaNoFact</a></li><li><a href="global.html#updateEstado">updateEstado</a></li><li><a href="global.html#updateLocalData">updateLocalData</a></li><li><a href="global.html#updateNombreFoto">updateNombreFoto</a></li><li><a href="global.html#updatePagesGasto">updatePagesGasto</a></li><li><a href="global.html#uploadFile">uploadFile</a></li><li><a href="global.html#validacionNuevaBitacora">validacionNuevaBitacora</a></li><li><a href="global.html#validarInspeccionSinSiniestro">validarInspeccionSinSiniestro</a></li><li><a href="global.html#validateDocumentoCargado">validateDocumentoCargado</a></li><li><a href="global.html#validateEnviarIns">validateEnviarIns</a></li><li><a href="global.html#validateGastosReport">validateGastosReport</a></li><li><a href="global.html#validateNuevasFotografias">validateNuevasFotografias</a></li><li><a href="global.html#validateNuevoDetalleGasto">validateNuevoDetalleGasto</a></li><li><a href="global.html#validateNuevoRepGasto">validateNuevoRepGasto</a></li><li><a href="global.html#value">value</a></li><li><a href="global.html#verBitacora">verBitacora</a></li><li><a href="global.html#verInspeccion">verInspeccion</a></li><li><a href="global.html#verInspeccionSin">verInspeccionSin</a></li><li><a href="global.html#verReporteGasto">verReporteGasto</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 3.6.4</a> on Fri Oct 16 2020 08:31:37 GMT-0700 (Pacific Daylight Time)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>
