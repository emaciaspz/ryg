/** @type {Logger} */
var pdfLog = getLogger('pdf');

/**
 * Regresa un objeto con los campos que espera el servidor
 * @param {PdfInspeccion} pdf 
 * @returns {{
	*  documentos_caso: string|number,
	*  documentos_observaciones: string,
	*  up_documento: string,
	*  dataUri: string
	* }}
 */
function pdfToJson(pdf) {
	var params = {
		documentos_caso: pdf.documentos_caso,
		documentos_observaciones: pdf.documentos_observaciones,
		up_documento: pdf.up_documento,
		dataUri: pdf.up_documento
	}
	return params;
}

/**
 * Pantalla para subir pdf de inspeccion
 */
function openPDF() {
	fn.load('pdf.html');
	var idInspeccion = window.localStorage.getItem("inspeccion_id");
	sqlQuery('SELECT fecha FROM Inspeccion WHERE tableInspeccionID = ?', [idInspeccion], function (results) {
		$('#idComentario').val('');
		if (results != true) {
			mostrarPDF(results);
		} else {
			showNotice("Ha ocurrido un error inesperado, intentelo mas tarde");
		}
	});
}

/**
 * Muestra la fecha en el formulario del pdf de inspeccion
 * @param {{fecha: string}} data fecha
 */
function mostrarPDF(data) {
	var date = data[0].fecha;
	date = date.split(" ")[0];
	$('#fechaIns').val(date);
}

/**
 * Guardar el pdf de inspeccion
 */
function subirPDF() {
	document.getElementById('btnCrearInspeccionPdf').setAttribute('disabled', 'disabled');
	document.getElementById('btnCrearInspeccionPdf').insertAdjacentHTML('beforeend', `<span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true" style="margin-bottom: 2px;"></span>`)
	let documentos_caso = window.localStorage.getItem("idSiniestroServidor");
	documentos_caso = documentos_caso ? documentos_caso : window.localStorage.getItem("idSiniestroLocal");
	let documentoURI = document.getElementById("documento").value;
	let documentos_observaciones = $("#idComentario").val();
	if (documentoURI != null && documentoURI.trim() != "") {
		sqlPromise(`INSERT INTO Pdf (documentos_caso, up_documento, documentos_observaciones, mimetype) 
				VALUES (?,?,?,?)`, [documentos_caso, documentoURI, documentos_observaciones, 'application/pdf'])
			.then(r => r.insertId)
			.then(documentoId => guardarPeticionPromise(server + "documento.php", 'UPLOAD_PDF', 'Pdf', 'idPdf', documentoId))
			.then(() => {
				showSuccess("Se ha subido con exito el pdf");
				backVerInspeccion();
			})
			.catch(error => pdfLog.error('error al guardar pdf firmado', error))
	} else {
		showError("Debe cargar un documento");
	}
}

/**
 * Función que descarga el archivo PDF de la inspeccion
 */
function downloadPDF() {
	showNotice("Generando documento, espere un momento...");
	// Obtiene la información para generar el pdf
	getDataSiniestro(function (infoSiniestro) { // Datos del siniestro
		getDataInspeccion(function (infoDetalleInspeccion) { // Datos de la inspeccion
			getDatosUsuario(function (datosUsuario) { // Datos del usuario
				showNotice("Obteniendo fotografías...");
				getFotosInspeccion(function (listFotos) {
					if (listFotos != null) {
						reducePictureSize(listFotos).then(fotos => {
							generatePdfFromTemplate(infoSiniestro, infoDetalleInspeccion, datosUsuario, fotos);
						}).catch(error => console.error('[pdf]', 'error en fotos', error));
					} else {
						navigator.notification.confirm('La inspeccion no cuenta con fotografías, ¿desea continuar?',
							function (results) {
								if (results === 2) {
									generatePdfFromTemplate(infoSiniestro, infoDetalleInspeccion, datosUsuario, listFotos);
								}
							},
							'Acta de Inspección',
							['Cancelar', 'Continuar']
						);
					}

				});
			});
		});
	});

	/**
	 * Obtiene la informacion de un siniestro y se lo pasa a un callback
	 * @param {function} callback 
	 */
	function getDataSiniestro(callback) {
		var idSiniestro = window.localStorage.getItem('idSiniestroServidor');
		sqlQuery('SELECT * FROM Siniestro WHERE caso_id = ?', [idSiniestro], function (dataSiniestro) {
			var infoSiniestro;
			if (dataSiniestro != true) {
				infoSiniestro = dataSiniestro[0];
			} else {
				infoSiniestro = null;
			}
			callback(infoSiniestro);
		});
	}

	/**
	 * Obtiene la informacion de un detalle de inspeccion y se lo pasa a un callback
	 * @param {function} callback 
	 */
	function getDataInspeccion(callback) {
		var idInspeccion = window.localStorage.getItem('inspeccion_id');
		sqlQuery('SELECT * FROM DetalleInspeccion WHERE idInspeccion = ?', [idInspeccion], function (dataDetalleInspeccion) {
			var detalleInspeccion;
			if (dataDetalleInspeccion != true) {
				detalleInspeccion = dataDetalleInspeccion[0];
			} else {
				detalleInspeccion = null;
			}
			callback(detalleInspeccion);
		})
	}

	/**
	 * Obitene un listado de fotos de inspeccion y se lo pasa a un callback
	 * @param {function} callback
	 */
	function getFotosInspeccion(callback) {
		var idSiniestro = window.localStorage.getItem('idSiniestroServidor');
		sqlQuery('SELECT * FROM FotoInspeccion WHERE edita_dato = ?', [idSiniestro], function (dataFotoInspeccion) {
			var listFotosIns;
			if (dataFotoInspeccion != true) {
				listFotosIns = dataFotoInspeccion;
			} else {
				listFotosIns = null;
			}
			callback(listFotosIns);
		});
	}
}

/**
 * Funcion para comprimir una lista de fotos de inspeccion
 * @param {Array<FotoInspeccion>} listaFotos 
 * @returns {Promise<Array<string|any>>} lista de base64 comprimida
 */
function reducePictureSize(listaFotos) {
	pdfLog.debug('comprimiendo imagenes...');
	/**
	 *  @param {FotoInspeccion} foto 
	 *  @returns {Promise<FotoInspeccion>}
	*/
	function loadImage(foto) {
		return new Promise((resolve, reject) => {
			const img = new Image();
			foto.img = img;
			img.addEventListener("load", () => resolve(foto));
			img.addEventListener("error", err => reject(err));
			img.src = foto.base64;
		}).catch(error => {
			showNotice('Algunas imagenes no se pudieron obtener')
			pdfLog.error('No se pudo comprimir la foto', error)
		})
	};

	var promesas = [];
	for (var i = 0; i < listaFotos.length; i++) {
		promesas.push(loadImage(listaFotos[i]))
	}
	return Promise.all(promesas).then(fotos => {
		for (var i = 0; i < fotos.length; i++) {
			if (fotos[i] == null)
				continue;
			const height = 210;
			const scaleFactor = height / fotos[i].img.height;
			const width = fotos[i].img.width * scaleFactor;
			const canvas = document.createElement('canvas');
			const ctx = canvas.getContext('2d');
			ctx.width = 280;
			ctx.height = height;
			canvas.width = 280;
			canvas.height = 215;
			console.log('[pdf]', { width, height });
			ctx.drawImage(fotos[i].img, (ctx.width / 2 - width / 2), 0, width, height);
			ctx.globalCompositeOperation = 'destination-over'
			// Now draw!
			ctx.fillStyle = "white";
			ctx.fillRect(0, 0, canvas.width, canvas.height);
			fotos[i].up_documento = canvas.toDataURL("image/jpeg", 0.9);
			delete fotos[i].img;
		}
		return fotos;
	});
}

