<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Source: gasto/GastosService.js</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Source: gasto/GastosService.js</h1>

    



    
    <section>
        <article>
            <pre class="prettyprint source linenums"><code>/**
 * Servicio para gastos
 * @class
 */
const GastosService = {
    descargaFileTransfer: null, // FileTransfer usado para descargar,
    DETALLES_POR_PAGINA: 10, // numero de detalles de gasto que devuelve el servicio por pagina

    /**
     * Retorna un listado de detalles de gasto asociados a un gastosReporId
     * @param {number} gastosReporId
     * @returns {Promise&lt;Array&lt;DetalleGasto>>}
     */
    obtenerDetallesDeGastoServidor(gastosReporId) {
        function obtenerPagina(pagina) {
            return new Promise((resolve, reject) => {
                sendGetRequest(`gastos_reporte.php?id=${gastosReporId}&amp;pageNum_user=${pagina}`, resolve, reject)
            })
        }
        let paginas = [];
        return obtenerPagina(0).then(response => {
            paginas.push(response.repGasto.resultados) // guardar la primera pagina
            let registros = parseInt(response.repGasto.registros); // cantidad de registros totales
            let pagina = 1;
            // si hay mas registros en las otras paginas, envia un request y obtiene los resultados
            for (let i = this.DETALLES_POR_PAGINA; i &lt; registros; i += this.DETALLES_POR_PAGINA)
                paginas.push(obtenerPagina(pagina++).then(response => response.repGasto.resultados));
            return Promise.all(paginas)
        }).then(resultadosPorPagina => {
            return Array.prototype.concat.apply([], resultadosPorPagina)
        });
    }, 

    /**
     * Actualiza los detalles de gasto con la informacion del servidor
     * @param {number|string} gastosReporId
     * @param {number|string} idGasto 
     */
    actualizarDetallesDeGasto(gastosReporId, idGasto) {
        /** 
         * Funcion para actualizar el detalle de gasto con los datos obtenidos del servidor
         * @param {DetalleGasto} nuevo 
         * @param {DetalleGasto} actual 
         * */
        let actualizar = (nuevo, actual) => {
            nuevo.idDetalleGasto = actual.idDetalleGasto
            this.detalleGastoTienePeticionesPendiente(actual.idDetalleGasto).then(tienePeticionesPendiente => {
                if (tienePeticionesPendiente) // no se actualiza si todavia tiene peticiones pendiente
                    return;
                return GastosService.actualizarDetalleGasto(nuevo);
            })
        }
        // obtener los detalles locales y del servidor
        return Promise.all([
            this.obtenerDetallesDeGastoServidor(gastosReporId), // 0 servidor
            this.obtenerDetallesDeGasto(idGasto) // 1 local
        ]).then(resultado => {
            console.log('resultado', resultado);
            // filtrar los detalles de gasto eliminados
            let pendientesDeEliminar = resultado[1].filter(local => {
                let estaSincronizado = local.gastos_id != null;
                let noEstaEnServidor = !resultado[0].find(servidor => local.gastos_id == servidor.gastos_id);
                // si esta sincronizado gastos_id y no esta en el servidor
                return estaSincronizado &amp;&amp; noEstaEnServidor
                    
            })
            let promesasEliminar = pendientesDeEliminar.map(detalleGasto => {
                return this.eliminarDetalleGasto(detalleGasto.idDetalleGasto);
            });
            let promesasAgregar = resultado[0].map(detalleNuevo => {
                return this.obtenerDetalleGastoPorGastosId(detalleNuevo.gastos_id).then(detalleActual => {
                    detalleNuevo.fk_idGasto = idGasto; // asignar el idGasto con el detalle de gasto del servidor
                    if (detalleActual != null) { // existe, hay que actualizarlo
                        return actualizar(detalleNuevo, detalleActual); 
                    } else { // no existe se inserta en la bd
                        return GastosService.guardarDetalleGasto(detalleNuevo) // no exite insertar
                    }
                })
            });
            return Promise.all(promesasAgregar.concat(promesasEliminar)).catch(error => {
                showError('Error inesperado al obtener listado')
                gastoLog.error('Error al obtener listado de detalle gastos', error)
            })
        })
        .finally(() => hideLoading())
    },

    estaPendienteDeEliminar(idDetalleGasto) {
        return sqlPromise(`SELECT * FROM Peticiones WHERE entidad = 'EliminarDetalleGasto' 
                AND identificador = ? AND estatus != 'OK'`, [idDetalleGasto])
            .then(r => r.rows.length > 0 ? true : false)
    },

    eliminarDetalleGasto(idDetalleGasto) {
        return sqlPromise(`DELETE FROM Peticiones WHERE entidad = 'DocumentoGasto' AND identificador IN (
            SELECT idDocumentoGasto FROM DocumentoGasto WHERE fk_idDetalleGasto=?)`, 
            [idDetalleGasto])
            .then(() => sqlPromise(`DELETE FROM DocumentoGasto WHERE fk_idDetalleGasto=?`, [idDetalleGasto]))
            .then(() => sqlPromise(`DELETE FROM Peticiones WHERE entidad = 'DetalleGasto' AND identificador=?`, [idDetalleGasto]))
            .then(() => sqlPromise('DELETE FROM DetalleGasto WHERE idDetalleGasto=?', [idDetalleGasto]))
    },

    tieneDocumentosPendientes(idDetalleGasto) {
        return sqlPromise(`SELECT * FROM Peticiones p INNER JOIN DocumentoGasto dg ON 
            p.estatus != 'OK' AND
            p.entidad = 'DocumentoGasto' AND 
            dg.idDocumentoGasto = p.identificador AND
            dg.fk_idDetalleGasto = ?`, [idDetalleGasto]).then(r => {
                return r.rows.length > 0;
            })
    },

    /**
     * El gasto tiene peticiones pendientes?
     * @param {number} idGasto 
     * @returns {Promise&lt;boolean>}
     */
    gastoTienePeticionesPendiente(idGasto) {
        return sqlPromise(`SELECT COUNT(*) as conteo FROM Peticiones 
            WHERE entidad = 'Gasto' AND identificador = ? AND estatus != 'OK'`, [idGasto])
        .then(r => r.rows.item(0).conteo > 0)
    },

    /**
     * El detalle de gasto tiene peticiones pendiente?
     * @param {number} gastosId
     * @returns {Promise&lt;boolean>}
     */
    detalleGastoTienePeticionesPendiente(gastosId) {
        return sqlPromise(`SELECT COUNT(*) as conteo FROM Peticiones p 
            INNER JOIN DetalleGasto d ON p.entidad = 'DetalleGasto' AND d.idDetalleGasto = p.identificador
            WHERE d.gastos_id = ? AND p.estatus != 'OK'`, [gastosId])
        .then(conteo => conteo > 0)
    },

    /**
     * Obtiene un detalle de gasto por su gastos_id
     * @param {number} gastosId
     * @returns {Promise&lt;DetalleGasto|null>}
     */
    obtenerDetalleGastoPorGastosId(gastosId) {
        return sqlPromise(`SELECT * FROM DetalleGasto WHERE gastos_id = ?`, [gastosId])
            .then(resultado => resultado.rows.length > 0 ? resultado.rows.item(0) : null)
    },

    /**
     * Dado una ruta con el formato ../documents/* descarga y regresa la direccion del archivo.
     * Si ya se ha descargado no lo vuelve a descargar
     * @param {string} comprobante 
     */
    descargarDocumenetoServidor(comprobante) {
        comprobante = comprobante.replace('../documentos/', SERVIDOR_DOCUMENTOS);
        let nombre = comprobante.substr(comprobante.lastIndexOf('/') + 1);
        let encontrarArchivo = Directorios.obtenerDirectorioGastoTemporal().then(directorio => {
            return Promise.all([
                directorio.nativeURL + nombre,
                Directorios.existeArchivo(directorio.nativeURL + nombre)
            ]) 
        });
        return encontrarArchivo.then(resultado => {
            let fileURL = resultado[0];
            let existe = resultado[1];
            if (!existe) {
                let headers = {
                    headers: {
                        "Authorization": "Bearer " + window.localStorage.getItem("tokenLogin")
                    }
                }
                GastosService.descargaFileTransfer = new FileTransfer();
                let descarga = new Promise((resolve, reject) => GastosService.descargaFileTransfer
                    .download(comprobante, fileURL, resolve, reject, null, headers));
                createAlertDialog('dialogoDescargarDocumentoGasto', 'dialogoDescargarDocumentoGasto.html');                    
                return descarga.then(fileEntry => {
                    return fileEntry.nativeURL;
                }).finally(() => {
                    hideAlertDialog('dialogoDescargarDocumentoGasto')
                })
            } else {
                return Promise.resolve(fileURL);
            }
        })
    },

    /**
     * Regresa el siguiente consecutivo del gasto dado el numero del siniestro
     * @param {number} gastos_repor_caso 
     * @returns {Promise&lt;number>}
     */
    obtenerSiguienteConsecutivo(gastos_repor_caso) {
        if (gastos_repor_caso == null) {
            gastos_repor_caso = 0; // no tiene siniestro
            var totalRegistros = window.localStorage.getItem("totalRegGastos");
            if (totalRegistros != null &amp;&amp; totalRegistros != "") {
                return Promise.resolve(parseInt(totalRegistros) + 1);
            }
        }
        return sqlPromise(`SELECT MAX(gastos_repor_consecu) as consecutivo FROM Gasto WHERE gastos_repor_caso = ?`, [gastos_repor_caso])
            .then(resultado => {
                if (resultado.rows.item(0) == null || resultado.rows.item(0) == 0)
                    return 1
                return resultado.rows.item(0).consecutivo + 1
            })
    },

    /**
     * Funcion para obtener imagen de camara o galeria usada en Android
     * @param {*} fuente
     * @returns {Promise}
     */
    cargarImagenConPlugin(fuente) {
        // por defecto galeria
        let srcType = Camera.PictureSourceType.SAVEDPHOTOALBUM;
        if (fuente === 'CAMARA') {
            srcType = Camera.PictureSourceType.CAMERA
        }
        return new Promise((resolve, reject) => {
            navigator.camera.getPicture(resolve, reject, {
                quality: 90,
                destinationType: Camera.DestinationType.FILE_URI,
                sourceType: srcType,
                encodingType: Camera.EncodingType.JPEG,
                mediaType: Camera.MediaType.PICTURE,
                allowEdit: false,
                correctOrientation: false
            })
        }).then(fotoUri => {
            //let fileName = fotoUri.substr(fotoUri.lastIndexOf('/') + 1)
            let newFileName = getUUID() + '.jpg'
            console.error(newFileName, 'newName')
            return GastosService.guardarDocumentoGasto(fotoUri, newFileName)
        })
        .then(fileEntry => {
            console.error('fileEntry', fileEntry)
            return fileEntry;
        })
    },

    /**
     * Opcion para cargar una imagen desde el input 
     * @param {HTMLInputElement} input
     * @returns {Promise}
     */
    cargarImagenDesdeInput(input) {
        let extension = input.value.split('.').pop().toLowerCase();
        let extensionValida = (extension == 'jpg' || extension == 'png' || extension == 'jpeg');
        if (!extensionValida) {
            showError('La imagen debe ser jpg, jpeg o png');
            return;
        }
        let filename = getUUID() + '.' + extension;
        let reader = new FileReader();

        return new Promise((resolve, reject) => {
            reader.onload = () => {
                resolve(new Blob([reader.result], {type: input.files[0].type}))
            }
            reader.onerror = reject;
            reader.readAsArrayBuffer(input.files[0]);
        }).then(blob => {
            return Directorios.obtenerDirectorioEspinosaDocs().then(dir => {
                return Directorios.guardarArchivo(dir.nativeURL, filename, blob)
            });
        })
    },

    /**
     * Funcion para guardar un documento de gasto
     * @param {string} fileURL direccion completa del archivo
     * @param {string} newName nuevo nombre para el archivo
     * @returns {Promise}
     */
    guardarDocumentoGasto(fileURL, newName) {
        return Promise.all([
            Directorios.obtenerDirectorioGasto(), // 0
            Directorios.obtenerBlobArchivo(fileURL) // 1
        ]).then(data => {
            return Directorios.guardarArchivo(data[0].nativeURL, newName, data[1])
        })
    },

    /**
     * Funcion para guardar un documento de gasto directamente desde un input
     * @param {HTMLInputElement} input 
     */
    guardarDocumentoGastoDesdeInput(input) {
        let extension = input.value.split('.').pop().toLowerCase();
        let newFileName = getUUID() + '.' + extension
        let blob = new Promise((resolve, reject) => {
            let reader = new FileReader();
            reader.onload = function () {
                resolve(new Blob([reader.result], {
                    type: 'text/xml'
                }))
                resolve(blob)
            };
            reader.onerror = reject
            reader.readAsArrayBuffer(input.files[0]);
        });
        let parametros = [Directorios.obtenerDirectorioGasto(), blob];
        return Promise.all(parametros)
            .then(p => Directorios.guardarArchivo(p[0].nativeURL, newFileName, p[1]))
            .then(URI => {
                gastoLog.error('xml', URI)
                return URI;
            })
    },

    /** 
     * Obtiene un listado de gastos por pagina
     * @param {number} numeroSiniestro
     * @param {number} pagina
     * @returns {Promise&lt;Array&lt;Gasto>>}
     */
    obtenerGastosPorPagina(numeroSiniestro, pagina) {
        if (numeroSiniestro == null || numeroSiniestro === 0) { // sin siniestro(general)
            return sqlPromise('SELECT * FROM Gasto WHERE gastos_repor_caso = ? AND page = ? ORDER BY gastos_repor_consecu DESC LIMIT 10', [0, pagina])
                .then(rowsAsList);
        } else { // con siniestro
            return sqlPromise('SELECT * FROM Gasto WHERE gastos_repor_caso = ? AND page = ? ORDER BY gastos_repor_consecu DESC LIMIT 20', [numeroSiniestro, pagina])
                .then(rowsAsList);
        }
    },

    /**
     * Obtiene los detalles de gasto dado su idGasto
     * @param {number|string} idGasto
     * @returns {Promise&lt;DetalleGasto[]>}
     */
    obtenerDetallesDeGasto(idGasto) {
        return sqlPromise('SELECT * FROM DetalleGasto WHERE fk_idGasto = ?', [idGasto])
            .then(rowsAsList)
    },

    /**
     * Obtiene la cantidad de gastos para un siniestro dado
     * @param {number|string} numeroSiniestro 
     * @returns {Promise&lt;number>}
     */
    obtenerGastosConteo(numeroSiniestro) {
        return sqlPromise('SELECT COUNT(*) as total FROM Gasto WHERE gastos_repor_caso = ?', [numeroSiniestro == null ? 0 : numeroSiniestro])
            .then(r => r.rows.item(0).total);
    },

    /**
     * Obtiene un listado de todos los gastos por siniestro del servidor
     * @param {number} idSiniestro
     * @returns {Promise} 
     */
    obtenerListaGastoServidor(idSiniestro) {
        if (idSiniestro != null &amp;&amp; idSiniestro != 0) {
            return new Promise((resolve, reject) => sendGetRequest('siniestro_full.php?caso=' + idSiniestro, resolve, reject))
                .then(response => ({resultados: response.gastos, registros: response.gastos.length}))
                .then(listado => {
                    console.error(listado);
                    return listado;
                })
        }
        
        let gastosSinSiniestro = (indicePagina) => new Promise((resolve, reject) => 
            sendGetRequest('ajustador_gastos.php?pageNum_user=' + indicePagina, resolve, reject))
        return gastosSinSiniestro(0)
            .then(r => parseInt(r.registros)) // obteniendo el total de la primera pagina
            .then(total => { 
                let elementosPorPagina = 10;
                let paginas = [];
                for (let pagina = 0 , i = 0; i &lt; total; i += elementosPorPagina) {
                    paginas.push(pagina++)
                }
                // busca los registros de todas las pagina
                let promesas = paginas.map(pagina => gastosSinSiniestro(pagina))
                return Promise.all(promesas)
            })
            .then(listaResultados => listaResultados.map(r => r.resultados))
            .then(resultados => Array.prototype.concat.apply([], resultados)) // junta los resultados
            .then(listado => ({resultados: listado,  registros: listado.length}))
    },

    /** 
     * Regresa un gasto por su idGasto 
     * @param {number} idGasto
     * @returns {Promise&lt;Gasto|null>}
     */
    obtenerGasto(idGasto) {
        return sqlPromise('SELECT * FROM Gasto WHERE idGasto = ?', [idGasto])
            .then(r => r.rows.length > 0 ? r.rows.item(0) : null)
    },

    /**
     * Obtiene documento de gasot
     * @param {number|string} idDetalleGasto 
     * @returns {Promise&lt;DetalleGasto|null>}
     */
    obtenerDetalleGasto(idDetalleGasto) {
        return sqlPromise('SELECT * FROM DetalleGasto WHERE idDetalleGasto = ?', [idDetalleGasto])
            .then(r => r.rows.length > 0 ? r.rows.item(0) : null)
    },

    /**
     * Obtiene los detalles de un correo dado su id
     * @param {number} idMail 
     * @returns {Promise&lt;SendMailGasto|null>}
     */
    obtenerSendMailGasto(idMail) {
        return sqlPromise('SELECT * FROM SendMailGasto WHERE idMail = ?', [idMail])
            .then(r => r.rows.length > 0 ? r.rows.item(0) : null)
    },

    /**
     * Obtiene el detalle de gasto en la bd
     * @param {number} idDocumentoGasto
     * @returns {Promise&lt;DocumentoGasto|null>}
     */
    obtenerDocumentoGasto(idDocumentoGasto) {
        return sqlPromise('SELECT * FROM DocumentoGasto WHERE idDocumentoGasto = ?', [idDocumentoGasto])
            .then(r => r.rows.length > 0 ? r.rows.item(0) : null)
    },

    /**
     * Busca un gasto por su gasto_repor_id, regresa null si no lo encuentra
     * @param {number} gastos_repor_id
     * @returns {Promise&lt;Gasto|null>}
     */
    obtenerGastoPorGastosReporId(gastos_repor_id) {
        return sqlPromise('SELECT * FROM Gasto WHERE gastos_repor_id = ?', [gastos_repor_id])
            .then(r => r.rows.length > 0 ? r.rows.item(0) : null)
    },

    /**
     * Funcion para insertar un nuevo gasto
     * @param {Gasto} g
     * @returns {Promise&lt;SQLResultSet>}
     */
    insertarGasto(g) {
        return sqlPromise(`INSERT INTO Gasto (gastos_repor_id, gastos_repor_caso, gastos_repor_consecu,  
            gastos_repor_user, gastos_repor_ajustador, gastos_repor_moneda,
            gastos_repor_anticipo, gastos_repor_nombre, gastos_repor_f_ini, 
            gastos_repor_f_fin, gastos_repor_mail, gastos_repor_coment, 
            gastos_repor_fecha_envi, gastos_repor_fecha, ajustador, 
            correspon_caso, page) 
            VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`, [
                g.gastos_repor_id, g.gastos_repor_caso, g.gastos_repor_consecu, 
                g.gastos_repor_user, g.gastos_repor_ajustador, g.gastos_repor_moneda,
                g.gastos_repor_anticipo, g.gastos_repor_nombre, g.gastos_repor_f_ini,
                g.gastos_repor_f_fin, g.gastos_repor_mail, g.gastos_repor_coment,
                g.gastos_repor_fecha_envi, g.gastos_repor_fecha, g.ajustador,
                g.correspon_caso, g.page
            ])
    },

    /**
     * Actualiza un gasto
     * @param {Gasto} g
     * @returns {Promise&lt;SQLResultSet>}
     */
    actualizarGasto(g) {
        return sqlPromise(`UPDATE Gasto SET gastos_repor_id = ?, gastos_repor_caso = ?, gastos_repor_consecu = ?, 
            gastos_repor_user = ?, gastos_repor_ajustador = ?, gastos_repor_moneda = ?, 
            gastos_repor_nombre = ?, gastos_repor_f_ini = ?, gastos_repor_f_fin = ?, 
            gastos_repor_mail = ?, gastos_repor_coment = ?, gastos_repor_fecha_envi = ?, 
            gastos_repor_fecha = ?, ajustador = ?, correspon_caso = ?,
            gastos_repor_anticipo = ?
            WHERE idGasto = ?`, [
                g.gastos_repor_id, g.gastos_repor_caso, g.gastos_repor_consecu,
                g.gastos_repor_user, g.gastos_repor_ajustador, g.gastos_repor_moneda,
                g.gastos_repor_nombre, g.gastos_repor_f_ini, g.gastos_repor_f_fin,
                g.gastos_repor_mail, g.gastos_repor_coment, g.gastos_repor_fecha_envi,
                g.gastos_repor_fecha, g.ajustador, g.correspon_caso,
                g.gastos_repor_anticipo,
                g.idGasto
        ]);
    },

    /**
     * Inserta un detalle de gasto
     * @param {DetalleGasto} d 
     * @returns {Promise&lt;SQLResultSet>}
     */
    guardarDetalleGasto(d) {
        return sqlPromise(`INSERT INTO DetalleGasto (idDetalleGasto, gastos_id, gastos_caso, gastos_ajustador, 
            gastos_visada, gastos_id_reporte, gastos_valor, gastos_cargar, 
            gastos_moneda, gastos_fecha_real, gastos_emisor, gastos_descripcion, 
            gastos_concepto, gastos_razon_social, gastos_viaje_ini, gastos_viaje_fin, 
            gastos_amex, gastos_nulo, gastos_archivo, gastos_archivo_xml, 
            gastos_archivo_3, gastos_fecha, ajustador, fk_idGasto,
            gastos_repor_id, gastos_movil_caso, anio, mes, 
            dia, up_documento_2) 
            VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`, [
            null, d.gastos_id, d.gastos_caso, d.gastos_ajustador,
            d.gastos_visada, d.gastos_id_reporte, d.gastos_valor, d.gastos_cargar,
            d.gastos_moneda, d.gastos_fecha_real, d.gastos_emisor, d.gastos_descripcion,
            d.gastos_concepto, d.gastos_razon_social, d.gastos_viaje_ini, d.gastos_viaje_fin,
            d.gastos_amex, d.gastos_nulo, d.gastos_archivo, d.gastos_archivo_xml,
            d.gastos_archivo_3, d.gastos_fecha, d.ajustador, d.fk_idGasto,
            d.gastos_repor_id, d.gastos_movil_caso, d.anio, d.mes,
            d.dia, d.up_documento_2
        ])
    },

    /** 
     * Actualiza el detalle de gasto
     * @param {DetalleGasto} d
     * @returns {Promise&lt;SQLResultSet>}
     */
    actualizarDetalleGasto(d) {
        return sqlPromise(`UPDATE DetalleGasto SET gastos_caso = ?, gastos_visada = ?, gastos_id_reporte = ?,
            gastos_valor = ?, gastos_cargar = ?, gastos_moneda = ?, gastos_fecha_real = ?, 
            gastos_emisor = ?, gastos_descripcion = ?, gastos_concepto = ?, gastos_razon_social = ?, 
            gastos_viaje_ini = ?, gastos_viaje_fin = ?, gastos_amex = ?, gastos_nulo = ?, 
            gastos_archivo = ?, gastos_archivo_xml = ?, gastos_archivo_3 = ?, gastos_fecha = ?, 
            ajustador = ?, gastos_repor_id = ?, gastos_movil_caso = ?, 
            anio = ?, mes = ?, dia = ?, up_documento_2 = ?, 
            gastos_user = ?, gastos_ajustador = ?
            WHERE idDetalleGasto = ?`, [
            d.gastos_caso, d.gastos_visada, d.gastos_id_reporte,
            d.gastos_valor, d.gastos_cargar, d.gastos_moneda, d.gastos_fecha_real,
            d.gastos_emisor, d.gastos_descripcion, d.gastos_concepto, d.gastos_razon_social,
            d.gastos_viaje_ini, d.gastos_viaje_fin, d.gastos_amex, d.gastos_nulo,
            d.gastos_archivo, d.gastos_archivo_xml, d.gastos_archivo_3, d.gastos_fecha,
            d.ajustador, d.gastos_repor_id, d.gastos_movil_caso,
            d.anio, d.mes, d.dia, d.up_documento_2, 
            d.gastos_user, d.gastos_ajustador,
            d.idDetalleGasto
        ])
    },

    /** 
     * Actualiza el detalle de gasto pero no sus documentos asociados
     * @param {DetalleGasto} d
     * @returns {Promise&lt;SQLResultSet>}
     */
    actualizarDetalleGastoSinDocumentos(d) {
        return sqlPromise(`UPDATE DetalleGasto SET gastos_caso = ?, gastos_visada = ?, gastos_id_reporte = ?,
            gastos_valor = ?, gastos_cargar = ?, gastos_moneda = ?, gastos_fecha_real = ?, 
            gastos_emisor = ?, gastos_descripcion = ?, gastos_concepto = ?, gastos_razon_social = ?, 
            gastos_viaje_ini = ?, gastos_viaje_fin = ?, gastos_amex = ?, gastos_nulo = ?, 
            gastos_fecha = ?, ajustador = ?, gastos_repor_id = ?, gastos_movil_caso = ?, 
            anio = ?, mes = ?, dia = ?,
            gastos_ajustador = ?
            WHERE idDetalleGasto = ?`, [
            d.gastos_caso, d.gastos_visada, d.gastos_id_reporte,
            d.gastos_valor, d.gastos_cargar, d.gastos_moneda, d.gastos_fecha_real,
            d.gastos_emisor, d.gastos_descripcion, d.gastos_concepto, d.gastos_razon_social,
            d.gastos_viaje_ini, d.gastos_viaje_fin, d.gastos_amex, d.gastos_nulo,
            d.gastos_fecha, d.ajustador, d.gastos_repor_id, d.gastos_movil_caso,
            d.anio, d.mes, d.dia, 
            d.gastos_ajustador,
            d.idDetalleGasto
        ])
    },

    /**
     * Actualiza la foto de un detalle de gasto 
     * @param {number} idGasto 
     * @param {number} idDetalleGasto 
     * @param {string} fotoUri 
     * @returns {Promise&lt;SQLResultSet>}
     */
    actualizarFoto(idGasto, idDetalleGasto, fotoUri) {
        return sqlPromise('UPDATE DetalleGasto SET gastos_archivo = ?, up_documento_2 = ? WHERE idDetalleGasto = ?',
            [fotoUri, fotoUri, idDetalleGasto])
            .then(() => sqlPromise('INSERT INTO DocumentoGasto (gasto_id, filetype, mimeType, up_documento, fk_idDetalleGasto) VALUES (?,?,?,?,?)',
                [idGasto, 'png', 'image/jpg', fotoUri, idDetalleGasto]))
    },

    /**
     * Actualiza el xml(comprobante 2) de un detalle de gasto 
     * @param {number} idGasto 
     * @param {number} idDetalleGasto 
     * @param {string} xmlUri 
     * @returns {Promise&lt;SQLResultSet>}
     */
    actualizarXML(idGasto, idDetalleGasto, xmlUri) {
        return sqlPromise('UPDATE DetalleGasto SET gastos_archivo_xml = ? WHERE idDetalleGasto = ?',
            [xmlUri, idDetalleGasto])
            .then(() => sqlPromise('INSERT INTO DocumentoGasto (gasto_id, filetype, up_documento, mimeType, fk_idDetalleGasto) VALUES (?,?,?,?,?)',
                [idGasto, 'xml', xmlUri, 'text/xml', idDetalleGasto]))
    },

    /**
     * Actualiza el pdf de un detalle de gasto 
     * @param {number} idGasto 
     * @param {number} idDetalleGasto 
     * @param {string} pdfUri 
     * @returns {Promise&lt;SQLResultSet>}
     */
    actualizarPDF(idGasto, idDetalleGasto, pdfUri) {
        return sqlPromise('UPDATE DetalleGasto SET gastos_archivo_3 = ? WHERE idDetalleGasto = ?',
            [pdfUri, idDetalleGasto])
            .then(() => sqlPromise('INSERT INTO DocumentoGasto (gasto_id, filetype, up_documento, mimeType, fk_idDetalleGasto) VALUES (?,?,?,?,?)',
                [idGasto, 'pdf', pdfUri, 'application/pdf', idDetalleGasto]))
    }
}</code></pre>
        </article>
    </section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Modules</h3><ul><li><a href="module-GestureDetector.html">GestureDetector</a></li><li><a href="module-gestures.html">gestures</a></li></ul><h3>Classes</h3><ul><li><a href="-_anonymous_-GestureDetector.Instance.html">Instance</a></li><li><a href="CatalogoService.html">CatalogoService</a></li><li><a href="DialogoCerrarSesion.html">DialogoCerrarSesion</a></li><li><a href="DialogoNuevoUsuario.html">DialogoNuevoUsuario</a></li><li><a href="DialogoRestablecer.html">DialogoRestablecer</a></li><li><a href="GastosService.html">GastosService</a></li><li><a href="InspeccionFotografia.html">InspeccionFotografia</a></li><li><a href="InspeccionSubirDocumento.html">InspeccionSubirDocumento</a></li><li><a href="InspeccionTablaFotografias.html">InspeccionTablaFotografias</a></li><li><a href="ListadoPeticiones.html">ListadoPeticiones</a></li><li><a href="module-GestureDetector.Detection.html">Detection</a></li><li><a href="module-GestureDetector.Event.html">Event</a></li><li><a href="module-GestureDetector.PointerEvent.html">PointerEvent</a></li><li><a href="module-gestures.Drag.html">Drag</a></li><li><a href="module-gestures.Gesture.html">Gesture</a></li><li><a href="module-gestures.Hold.html">Hold</a></li><li><a href="module-gestures.Release.html">Release</a></li><li><a href="module-gestures.Swipe.html">Swipe</a></li><li><a href="module-gestures.Tap.html">Tap</a></li><li><a href="module-gestures.Touch.html">Touch</a></li><li><a href="module-gestures.Transform.html">Transform</a></li><li><a href="PeticionesDao.html">PeticionesDao</a></li><li><a href="TablaDetalleGasto.html">TablaDetalleGasto</a></li><li><a href="Utils.html">Utils</a></li></ul><h3>Events</h3><ul><li><a href="module-gestures.html#~event:change">change</a></li><li><a href="module-gestures.html#~event:changestate">changestate</a></li><li><a href="module-gestures.html#~event:close">close</a></li><li><a href="module-gestures.html#~event:destroy">destroy</a></li><li><a href="module-gestures.html#~event:doubletap">doubletap</a></li><li><a href="module-gestures.html#~event:drag">drag</a></li><li><a href="module-gestures.html#~event:dragdown">dragdown</a></li><li><a href="module-gestures.html#~event:dragend">dragend</a></li><li><a href="module-gestures.html#~event:dragright">dragright</a></li><li><a href="module-gestures.html#~event:dragstart">dragstart</a></li><li><a href="module-gestures.html#~event:dragup">dragup</a></li><li><a href="module-gestures.html#~event:drapleft">drapleft</a></li><li><a href="module-gestures.html#~event:gesture">gesture</a></li><li><a href="module-gestures.html#~event:hide">hide</a></li><li><a href="module-gestures.html#~event:hold">hold</a></li><li><a href="module-gestures.html#~event:init">init</a></li><li><a href="module-gestures.html#~event:modechange">modechange</a></li><li><a href="module-gestures.html#~event:open">open</a></li><li><a href="module-gestures.html#~event:overscroll">overscroll</a></li><li><a href="module-gestures.html#~event:pinchin">pinchin</a></li><li><a href="module-gestures.html#~event:pinchout">pinchout</a></li><li><a href="module-gestures.html#~event:postchange">postchange</a></li><li><a href="module-gestures.html#~event:postclose">postclose</a></li><li><a href="module-gestures.html#~event:posthide">posthide</a></li><li><a href="module-gestures.html#~event:postopen">postopen</a></li><li><a href="module-gestures.html#~event:postpop">postpop</a></li><li><a href="module-gestures.html#~event:postpush">postpush</a></li><li><a href="module-gestures.html#~event:postshow">postshow</a></li><li><a href="module-gestures.html#~event:prechange">prechange</a></li><li><a href="module-gestures.html#~event:preclose">preclose</a></li><li><a href="module-gestures.html#~event:prehide">prehide</a></li><li><a href="module-gestures.html#~event:preopen">preopen</a></li><li><a href="module-gestures.html#~event:prepop">prepop</a></li><li><a href="module-gestures.html#~event:prepush">prepush</a></li><li><a href="module-gestures.html#~event:preshow">preshow</a></li><li><a href="module-gestures.html#~event:reactive">reactive</a></li><li><a href="module-gestures.html#~event:refresh">refresh</a></li><li><a href="module-gestures.html#~event:release">release</a></li><li><a href="module-gestures.html#~event:rotate">rotate</a></li><li><a href="module-gestures.html#~event:show">show</a></li><li><a href="module-gestures.html#~event:swipe">swipe</a></li><li><a href="module-gestures.html#~event:swipedown">swipedown</a></li><li><a href="module-gestures.html#~event:swipeleft">swipeleft</a></li><li><a href="module-gestures.html#~event:swiperight">swiperight</a></li><li><a href="module-gestures.html#~event:swipeup">swipeup</a></li><li><a href="module-gestures.html#~event:tap">tap</a></li><li><a href="module-gestures.html#~event:touch">touch</a></li><li><a href="module-gestures.html#~event:transform">transform</a></li><li><a href="module-gestures.html#~event:transformend">transformend</a></li><li><a href="module-gestures.html#~event:transformstart">transformstart</a></li></ul><h3>Global</h3><ul><li><a href="global.html#abrirDocumentoConAplicacionDeTerceros">abrirDocumentoConAplicacionDeTerceros</a></li><li><a href="global.html#abrirNuevaInspeccion">abrirNuevaInspeccion</a></li><li><a href="global.html#actualizarEstatusPeticion">actualizarEstatusPeticion</a></li><li><a href="global.html#actualizarListadoGasto">actualizarListadoGasto</a></li><li><a href="global.html#appLog">appLog</a></li><li><a href="global.html#b64toBlob">b64toBlob</a></li><li><a href="global.html#backReporteGasto">backReporteGasto</a></li><li><a href="global.html#backVerInspeccion">backVerInspeccion</a></li><li><a href="global.html#baseDatosLog">baseDatosLog</a></li><li><a href="global.html#bitacora">bitacora</a></li><li><a href="global.html#buscarInspeccionSinSiniestro">buscarInspeccionSinSiniestro</a></li><li><a href="global.html#buscarReferencia">buscarReferencia</a></li><li><a href="global.html#buscarSiniestro">buscarSiniestro</a></li><li><a href="global.html#cambiarSiniestro">cambiarSiniestro</a></li><li><a href="global.html#cambiarTareaNoFact">cambiarTareaNoFact</a></li><li><a href="global.html#cargarSelect">cargarSelect</a></li><li><a href="global.html#clearPeticiones">clearPeticiones</a></li><li><a href="global.html#closeModal">closeModal</a></li><li><a href="global.html#CONFIGURACION_LOGGER">CONFIGURACION_LOGGER</a></li><li><a href="global.html#constructor">constructor</a></li><li><a href="global.html#consultarGastos">consultarGastos</a></li><li><a href="global.html#contentLoadedFotografias">contentLoadedFotografias</a></li><li><a href="global.html#crearDocumento">crearDocumento</a></li><li><a href="global.html#crearInspeccion">crearInspeccion</a></li><li><a href="global.html#createDatabase">createDatabase</a></li><li><a href="global.html#datos">datos</a></li><li><a href="global.html#deleteBitacora">deleteBitacora</a></li><li><a href="global.html#deleteDatabase">deleteDatabase</a></li><li><a href="global.html#deletePeticion">deletePeticion</a></li><li><a href="global.html#DescripcionPeticion">DescripcionPeticion</a></li><li><a href="global.html#dialogoComfirmarCambiosInspeccion">dialogoComfirmarCambiosInspeccion</a></li><li><a href="global.html#dialogoEditarInspeccion">dialogoEditarInspeccion</a></li><li><a href="global.html#docFotoToJson">docFotoToJson</a></li><li><a href="global.html#documento">documento</a></li><li><a href="global.html#downloadLogFile">downloadLogFile</a></li><li><a href="global.html#downloadPDF">downloadPDF</a></li><li><a href="global.html#downloadPhoto">downloadPhoto</a></li><li><a href="global.html#downloadPhotos">downloadPhotos</a></li><li><a href="global.html#dropDatabasePromise">dropDatabasePromise</a></li><li><a href="global.html#enviarPeticionesPendientes">enviarPeticionesPendientes</a></li><li><a href="global.html#faltanDatosSiniestro">faltanDatosSiniestro</a></li><li><a href="global.html#FormatearPeticion">FormatearPeticion</a></li><li><a href="global.html#FormularioInspeccion">FormularioInspeccion</a></li><li><a href="global.html#fotoInspeccionToJson">fotoInspeccionToJson</a></li><li><a href="global.html#getBitacoraData">getBitacoraData</a></li><li><a href="global.html#getBitacoraParams">getBitacoraParams</a></li><li><a href="global.html#getDataReporteGasto">getDataReporteGasto</a></li><li><a href="global.html#getGastoData">getGastoData</a></li><li><a href="global.html#getGastoParams">getGastoParams</a></li><li><a href="global.html#getLogger">getLogger</a></li><li><a href="global.html#getUUID">getUUID</a></li><li><a href="global.html#guardarBitacora">guardarBitacora</a></li><li><a href="global.html#guardarBitacoraFacturableYNueva">guardarBitacoraFacturableYNueva</a></li><li><a href="global.html#guardarBitacoraFacturableYSalir">guardarBitacoraFacturableYSalir</a></li><li><a href="global.html#guardarBitacoraNoFacturableYNueva">guardarBitacoraNoFacturableYNueva</a></li><li><a href="global.html#guardarBitacoraNoFacturableYSalir">guardarBitacoraNoFacturableYSalir</a></li><li><a href="global.html#guardarBitacoras">guardarBitacoras</a></li><li><a href="global.html#guardarCambioBitacora">guardarCambioBitacora</a></li><li><a href="global.html#guardarCambios">guardarCambios</a></li><li><a href="global.html#guardarConceptos">guardarConceptos</a></li><li><a href="global.html#guardarEstadoInspeccion">guardarEstadoInspeccion</a></li><li><a href="global.html#guardarGrupoDocumento">guardarGrupoDocumento</a></li><li><a href="global.html#guardarMonedas">guardarMonedas</a></li><li><a href="global.html#guardarNuevoGasto">guardarNuevoGasto</a></li><li><a href="global.html#guardarPeticion">guardarPeticion</a></li><li><a href="global.html#guardarPeticionPromise">guardarPeticionPromise</a></li><li><a href="global.html#guardarSiniestro">guardarSiniestro</a></li><li><a href="global.html#guardarSubtarea">guardarSubtarea</a></li><li><a href="global.html#guardarTarea">guardarTarea</a></li><li><a href="global.html#guardarTipoAnexo">guardarTipoAnexo</a></li><li><a href="global.html#guardarTipoFoto">guardarTipoFoto</a></li><li><a href="global.html#initBitacora">initBitacora</a></li><li><a href="global.html#initNuevoDetalle">initNuevoDetalle</a></li><li><a href="global.html#initNuevoGasto">initNuevoGasto</a></li><li><a href="global.html#initRefSin">initRefSin</a></li><li><a href="global.html#initResultadosSiniestro">initResultadosSiniestro</a></li><li><a href="global.html#initSendGastos">initSendGastos</a></li><li><a href="global.html#inspeccion">inspeccion</a></li><li><a href="global.html#inspeccionBuscarSin">inspeccionBuscarSin</a></li><li><a href="global.html#inspeccionCambioRegistrado">inspeccionCambioRegistrado</a></li><li><a href="global.html#inspeccionHabilitarEditarSiniestro">inspeccionHabilitarEditarSiniestro</a></li><li><a href="global.html#InspeccionService">InspeccionService</a></li><li><a href="global.html#isSynced">isSynced</a></li><li><a href="global.html#lastUserAct">lastUserAct</a></li><li><a href="global.html#limpiarCampos">limpiarCampos</a></li><li><a href="global.html#loadBitacora">loadBitacora</a></li><li><a href="global.html#loadSubtareas">loadSubtareas</a></li><li><a href="global.html#Migraciones">Migraciones</a></li><li><a href="global.html#mostrarGastos">mostrarGastos</a></li><li><a href="global.html#mostrarInspeccion">mostrarInspeccion</a></li><li><a href="global.html#mostrarNuevaInspeccion">mostrarNuevaInspeccion</a></li><li><a href="global.html#mostrarReporteGasto">mostrarReporteGasto</a></li><li><a href="global.html#nuevaBitacoraNoFacturable">nuevaBitacoraNoFacturable</a></li><li><a href="global.html#obtenerFecha">obtenerFecha</a></li><li><a href="global.html#obtenerFechaHHMMSS">obtenerFechaHHMMSS</a></li><li><a href="global.html#openEnviarIns">openEnviarIns</a></li><li><a href="global.html#openFotografiasCargadas">openFotografiasCargadas</a></li><li><a href="global.html#openPhotoCamera">openPhotoCamera</a></li><li><a href="global.html#openPhotoLibrary">openPhotoLibrary</a></li><li><a href="global.html#optionBitaFact">optionBitaFact</a></li><li><a href="global.html#paginasTotales">paginasTotales</a></li><li><a href="global.html#panelUsuario">panelUsuario</a></li><li><a href="global.html#progressBar">progressBar</a></li><li><a href="global.html#reducePictureSize">reducePictureSize</a></li><li><a href="global.html#refLog">refLog</a></li><li><a href="global.html#resetAllError">resetAllError</a></li><li><a href="global.html#resolveLocalDevicePath">resolveLocalDevicePath</a></li><li><a href="global.html#resultadosBitacora">resultadosBitacora</a></li><li><a href="global.html#resultadosDatos">resultadosDatos</a></li><li><a href="global.html#resultadosInspeccion">resultadosInspeccion</a></li><li><a href="global.html#resultadosInspeccionSin">resultadosInspeccionSin</a></li><li><a href="global.html#rowsAsList">rowsAsList</a></li><li><a href="global.html#savebase64AsPDF">savebase64AsPDF</a></li><li><a href="global.html#saveDataUser">saveDataUser</a></li><li><a href="global.html#saveEmail">saveEmail</a></li><li><a href="global.html#savePhotoFile">savePhotoFile</a></li><li><a href="global.html#saveRequest">saveRequest</a></li><li><a href="global.html#saveResponse">saveResponse</a></li><li><a href="global.html#select">select</a></li><li><a href="global.html#sendCambiosBitacora">sendCambiosBitacora</a></li><li><a href="global.html#sendMail">sendMail</a></li><li><a href="global.html#sendPeticiones">sendPeticiones</a></li><li><a href="global.html#setDataSiniestro">setDataSiniestro</a></li><li><a href="global.html#setOptions">setOptions</a></li><li><a href="global.html#showFotosCargadas">showFotosCargadas</a></li><li><a href="global.html#showModal">showModal</a></li><li><a href="global.html#sqlError">sqlError</a></li><li><a href="global.html#sqlPromise">sqlPromise</a></li><li><a href="global.html#sqlQuery">sqlQuery</a></li><li><a href="global.html#stringToBlob">stringToBlob</a></li><li><a href="global.html#submitDocumentoCargado">submitDocumentoCargado</a></li><li><a href="global.html#submitInspeccionSeleccionada">submitInspeccionSeleccionada</a></li><li><a href="global.html#submitNuevasFotografias">submitNuevasFotografias</a></li><li><a href="global.html#submitRepoGasto">submitRepoGasto</a></li><li><a href="global.html#submitValidateGastosReport">submitValidateGastosReport</a></li><li><a href="global.html#syncLocalData">syncLocalData</a></li><li><a href="global.html#takePhoto">takePhoto</a></li><li><a href="global.html#updateAnticipo">updateAnticipo</a></li><li><a href="global.html#updateBitacora">updateBitacora</a></li><li><a href="global.html#updateBitaNoFact">updateBitaNoFact</a></li><li><a href="global.html#updateEstado">updateEstado</a></li><li><a href="global.html#updateLocalData">updateLocalData</a></li><li><a href="global.html#updateNombreFoto">updateNombreFoto</a></li><li><a href="global.html#updatePagesGasto">updatePagesGasto</a></li><li><a href="global.html#uploadFile">uploadFile</a></li><li><a href="global.html#validacionNuevaBitacora">validacionNuevaBitacora</a></li><li><a href="global.html#validarInspeccionSinSiniestro">validarInspeccionSinSiniestro</a></li><li><a href="global.html#validateDocumentoCargado">validateDocumentoCargado</a></li><li><a href="global.html#validateEnviarIns">validateEnviarIns</a></li><li><a href="global.html#validateGastosReport">validateGastosReport</a></li><li><a href="global.html#validateNuevasFotografias">validateNuevasFotografias</a></li><li><a href="global.html#validateNuevoDetalleGasto">validateNuevoDetalleGasto</a></li><li><a href="global.html#validateNuevoRepGasto">validateNuevoRepGasto</a></li><li><a href="global.html#value">value</a></li><li><a href="global.html#verBitacora">verBitacora</a></li><li><a href="global.html#verInspeccion">verInspeccion</a></li><li><a href="global.html#verInspeccionSin">verInspeccionSin</a></li><li><a href="global.html#verReporteGasto">verReporteGasto</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 3.6.4</a> on Fri Oct 16 2020 08:31:37 GMT-0700 (Pacific Daylight Time)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>
